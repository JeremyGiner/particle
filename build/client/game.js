// Generated by Haxe 4.0.5
(function ($hx_exports, $global) { "use strict";
function $extend(from, fields) {
	var proto = Object.create(from);
	for (var name in fields) proto[name] = fields[name];
	if( fields.toString !== Object.prototype.toString ) proto.toString = fields.toString;
	return proto;
}
var HxOverrides = function() { };
HxOverrides.__name__ = true;
HxOverrides.iter = function(a) {
	return { cur : 0, arr : a, hasNext : function() {
		return this.cur < this.arr.length;
	}, next : function() {
		return this.arr[this.cur++];
	}};
};
var Lambda = function() { };
Lambda.__name__ = true;
Lambda.array = function(it) {
	var a = [];
	var i = $getIterator(it);
	while(i.hasNext()) {
		var i1 = i.next();
		a.push(i1);
	}
	return a;
};
Lambda.count = function(it,pred) {
	var n = 0;
	if(pred == null) {
		var _ = $getIterator(it);
		while(_.hasNext()) {
			var _1 = _.next();
			++n;
		}
	} else {
		var x = $getIterator(it);
		while(x.hasNext()) {
			var x1 = x.next();
			if(pred(x1)) {
				++n;
			}
		}
	}
	return n;
};
Math.__name__ = true;
var Perf = $hx_exports["Perf"] = function(pos,offset) {
	if(offset == null) {
		offset = 0;
	}
	if(pos == null) {
		pos = "TR";
	}
	this._perfObj = window.performance;
	if(Reflect.field(this._perfObj,"memory") != null) {
		this._memoryObj = Reflect.field(this._perfObj,"memory");
	}
	this._memCheck = this._perfObj != null && this._memoryObj != null && this._memoryObj.totalJSHeapSize > 0;
	this._pos = pos;
	this._offset = offset;
	this.currentFps = 60;
	this.currentMs = 0;
	this.currentMem = "0";
	this.lowFps = 60;
	this.avgFps = 60;
	this._measureCount = 0;
	this._totalFps = 0;
	this._time = 0;
	this._ticks = 0;
	this._fpsMin = 60;
	this._fpsMax = 60;
	this._startTime = this._perfObj != null && this._perfObj.now != null ? this._perfObj.now() : new Date().getTime();
	this._prevTime = -Perf.MEASUREMENT_INTERVAL;
	this._createFpsDom();
	this._createMsDom();
	if(this._memCheck) {
		this._createMemoryDom();
	}
	if(window.requestAnimationFrame != null) {
		this.RAF = ($_=window,$bind($_,$_.requestAnimationFrame));
	} else if(window.mozRequestAnimationFrame != null) {
		this.RAF = window.mozRequestAnimationFrame;
	} else if(window.webkitRequestAnimationFrame != null) {
		this.RAF = window.webkitRequestAnimationFrame;
	} else if(window.msRequestAnimationFrame != null) {
		this.RAF = window.msRequestAnimationFrame;
	}
	if(window.cancelAnimationFrame != null) {
		this.CAF = ($_=window,$bind($_,$_.cancelAnimationFrame));
	} else if(window.mozCancelAnimationFrame != null) {
		this.CAF = window.mozCancelAnimationFrame;
	} else if(window.webkitCancelAnimationFrame != null) {
		this.CAF = window.webkitCancelAnimationFrame;
	} else if(window.msCancelAnimationFrame != null) {
		this.CAF = window.msCancelAnimationFrame;
	}
	if(this.RAF != null) {
		this._raf = this.RAF.apply(window,[$bind(this,this._tick)]);
	}
};
Perf.__name__ = true;
Perf.prototype = {
	_init: function() {
		this.currentFps = 60;
		this.currentMs = 0;
		this.currentMem = "0";
		this.lowFps = 60;
		this.avgFps = 60;
		this._measureCount = 0;
		this._totalFps = 0;
		this._time = 0;
		this._ticks = 0;
		this._fpsMin = 60;
		this._fpsMax = 60;
		this._startTime = this._perfObj != null && this._perfObj.now != null ? this._perfObj.now() : new Date().getTime();
		this._prevTime = -Perf.MEASUREMENT_INTERVAL;
	}
	,_now: function() {
		if(this._perfObj != null && this._perfObj.now != null) {
			return this._perfObj.now();
		} else {
			return new Date().getTime();
		}
	}
	,_tick: function(val) {
		var time = this._perfObj != null && this._perfObj.now != null ? this._perfObj.now() : new Date().getTime();
		this._ticks++;
		if(this._raf != null && time > this._prevTime + Perf.MEASUREMENT_INTERVAL) {
			this.currentMs = Math.round(time - this._startTime);
			this.ms.innerHTML = "MS: " + this.currentMs;
			this.currentFps = Math.round(this._ticks * 1000 / (time - this._prevTime));
			if(this.currentFps > 0 && val > Perf.DELAY_TIME) {
				this._measureCount++;
				this._totalFps += this.currentFps;
				this.lowFps = this._fpsMin = Math.min(this._fpsMin,this.currentFps);
				this._fpsMax = Math.max(this._fpsMax,this.currentFps);
				this.avgFps = Math.round(this._totalFps / this._measureCount);
			}
			this.fps.innerHTML = "FPS: " + this.currentFps + " (" + this._fpsMin + "-" + this._fpsMax + ")";
			if(this.currentFps >= 30) {
				this.fps.style.backgroundColor = Perf.FPS_BG_CLR;
			} else if(this.currentFps >= 15) {
				this.fps.style.backgroundColor = Perf.FPS_WARN_BG_CLR;
			} else {
				this.fps.style.backgroundColor = Perf.FPS_PROB_BG_CLR;
			}
			this._prevTime = time;
			this._ticks = 0;
			if(this._memCheck) {
				this.currentMem = this._getFormattedSize(this._memoryObj.usedJSHeapSize,2);
				this.memory.innerHTML = "MEM: " + this.currentMem;
			}
		}
		this._startTime = time;
		if(this._raf != null) {
			this._raf = this.RAF.apply(window,[$bind(this,this._tick)]);
		}
	}
	,_createDiv: function(id,top) {
		if(top == null) {
			top = 0;
		}
		var div = window.document.createElement("div");
		div.id = id;
		div.className = id;
		div.style.position = "absolute";
		switch(this._pos) {
		case "BL":
			div.style.left = this._offset + "px";
			div.style.bottom = (this._memCheck ? 48 : 32) - top + "px";
			break;
		case "BR":
			div.style.right = this._offset + "px";
			div.style.bottom = (this._memCheck ? 48 : 32) - top + "px";
			break;
		case "TL":
			div.style.left = this._offset + "px";
			div.style.top = top + "px";
			break;
		case "TR":
			div.style.right = this._offset + "px";
			div.style.top = top + "px";
			break;
		}
		div.style.width = "80px";
		div.style.height = "12px";
		div.style.lineHeight = "12px";
		div.style.padding = "2px";
		div.style.fontFamily = Perf.FONT_FAMILY;
		div.style.fontSize = "9px";
		div.style.fontWeight = "bold";
		div.style.textAlign = "center";
		window.document.body.appendChild(div);
		return div;
	}
	,_createFpsDom: function() {
		this.fps = this._createDiv("fps");
		this.fps.style.backgroundColor = Perf.FPS_BG_CLR;
		this.fps.style.zIndex = "995";
		this.fps.style.color = Perf.FPS_TXT_CLR;
		this.fps.innerHTML = "FPS: 0";
	}
	,_createMsDom: function() {
		this.ms = this._createDiv("ms",16);
		this.ms.style.backgroundColor = Perf.MS_BG_CLR;
		this.ms.style.zIndex = "996";
		this.ms.style.color = Perf.MS_TXT_CLR;
		this.ms.innerHTML = "MS: 0";
	}
	,_createMemoryDom: function() {
		this.memory = this._createDiv("memory",32);
		this.memory.style.backgroundColor = Perf.MEM_BG_CLR;
		this.memory.style.color = Perf.MEM_TXT_CLR;
		this.memory.style.zIndex = "997";
		this.memory.innerHTML = "MEM: 0";
	}
	,_getFormattedSize: function(bytes,frac) {
		if(frac == null) {
			frac = 0;
		}
		var sizes = ["Bytes","KB","MB","GB","TB"];
		if(bytes == 0) {
			return "0";
		}
		var precision = Math.pow(10,frac);
		var i = Math.floor(Math.log(bytes) / Math.log(1024));
		return Math.round(bytes * precision / Math.pow(1024,i)) / precision + " " + sizes[i];
	}
	,addInfo: function(val) {
		this.info = this._createDiv("info",this._memCheck ? 48 : 32);
		this.info.style.backgroundColor = Perf.INFO_BG_CLR;
		this.info.style.color = Perf.INFO_TXT_CLR;
		this.info.style.zIndex = "998";
		this.info.innerHTML = val;
	}
	,clearInfo: function() {
		if(this.info != null) {
			window.document.body.removeChild(this.info);
			this.info = null;
		}
	}
	,destroy: function() {
		this.CAF.apply(window,[this._raf]);
		this._raf = null;
		this._perfObj = null;
		this._memoryObj = null;
		if(this.fps != null) {
			window.document.body.removeChild(this.fps);
			this.fps = null;
		}
		if(this.ms != null) {
			window.document.body.removeChild(this.ms);
			this.ms = null;
		}
		if(this.memory != null) {
			window.document.body.removeChild(this.memory);
			this.memory = null;
		}
		this.clearInfo();
		this.currentFps = 60;
		this.currentMs = 0;
		this.currentMem = "0";
		this.lowFps = 60;
		this.avgFps = 60;
		this._measureCount = 0;
		this._totalFps = 0;
		this._time = 0;
		this._ticks = 0;
		this._fpsMin = 60;
		this._fpsMax = 60;
		this._startTime = this._perfObj != null && this._perfObj.now != null ? this._perfObj.now() : new Date().getTime();
		this._prevTime = -Perf.MEASUREMENT_INTERVAL;
	}
	,_cancelRAF: function() {
		this.CAF.apply(window,[this._raf]);
		this._raf = null;
	}
};
var Reflect = function() { };
Reflect.__name__ = true;
Reflect.field = function(o,field) {
	try {
		return o[field];
	} catch( e ) {
		var e1 = ((e) instanceof js__$Boot_HaxeError) ? e.val : e;
		return null;
	}
};
Reflect.compare = function(a,b) {
	if(a == b) {
		return 0;
	} else if(a > b) {
		return 1;
	} else {
		return -1;
	}
};
Reflect.isEnumValue = function(v) {
	if(v != null) {
		return v.__enum__ != null;
	} else {
		return false;
	}
};
var Std = function() { };
Std.__name__ = true;
Std.string = function(s) {
	return js_Boot.__string_rec(s,"");
};
var Type = function() { };
Type.__name__ = true;
Type.enumParameters = function(e) {
	var enm = $hxEnums[e.__enum__];
	var ctorName = enm.__constructs__[e._hx_index];
	var params = enm[ctorName].__params__;
	if(params != null) {
		var _g = [];
		var _g1 = 0;
		while(_g1 < params.length) {
			var p = params[_g1];
			++_g1;
			_g.push(e[p]);
		}
		return _g;
	} else {
		return [];
	}
};
var haxe_IntTool = function() { };
haxe_IntTool.__name__ = true;
haxe_IntTool.max = function(a,b) {
	if(a > b) {
		return a;
	} else {
		return b;
	}
};
haxe_IntTool.min = function(a,b) {
	if(a < b) {
		return a;
	} else {
		return b;
	}
};
var haxe_Timer = function(time_ms) {
	var me = this;
	this.id = setInterval(function() {
		me.run();
	},time_ms);
};
haxe_Timer.__name__ = true;
haxe_Timer.prototype = {
	stop: function() {
		if(this.id == null) {
			return;
		}
		clearInterval(this.id);
		this.id = null;
	}
	,run: function() {
	}
};
var haxe_ds_ArraySort = function() { };
haxe_ds_ArraySort.__name__ = true;
haxe_ds_ArraySort.sort = function(a,cmp) {
	haxe_ds_ArraySort.rec(a,cmp,0,a.length);
};
haxe_ds_ArraySort.rec = function(a,cmp,from,to) {
	var middle = from + to >> 1;
	if(to - from < 12) {
		if(to <= from) {
			return;
		}
		var _g = from + 1;
		var _g1 = to;
		while(_g < _g1) {
			var i = _g++;
			var j = i;
			while(j > from) {
				if(cmp(a[j],a[j - 1]) < 0) {
					haxe_ds_ArraySort.swap(a,j - 1,j);
				} else {
					break;
				}
				--j;
			}
		}
		return;
	}
	haxe_ds_ArraySort.rec(a,cmp,from,middle);
	haxe_ds_ArraySort.rec(a,cmp,middle,to);
	haxe_ds_ArraySort.doMerge(a,cmp,from,middle,to,middle - from,to - middle);
};
haxe_ds_ArraySort.doMerge = function(a,cmp,from,pivot,to,len1,len2) {
	var first_cut;
	var second_cut;
	var len11;
	var len22;
	if(len1 == 0 || len2 == 0) {
		return;
	}
	if(len1 + len2 == 2) {
		if(cmp(a[pivot],a[from]) < 0) {
			haxe_ds_ArraySort.swap(a,pivot,from);
		}
		return;
	}
	if(len1 > len2) {
		len11 = len1 >> 1;
		first_cut = from + len11;
		second_cut = haxe_ds_ArraySort.lower(a,cmp,pivot,to,first_cut);
		len22 = second_cut - pivot;
	} else {
		len22 = len2 >> 1;
		second_cut = pivot + len22;
		first_cut = haxe_ds_ArraySort.upper(a,cmp,from,pivot,second_cut);
		len11 = first_cut - from;
	}
	haxe_ds_ArraySort.rotate(a,cmp,first_cut,pivot,second_cut);
	var new_mid = first_cut + len22;
	haxe_ds_ArraySort.doMerge(a,cmp,from,first_cut,new_mid,len11,len22);
	haxe_ds_ArraySort.doMerge(a,cmp,new_mid,second_cut,to,len1 - len11,len2 - len22);
};
haxe_ds_ArraySort.rotate = function(a,cmp,from,mid,to) {
	if(from == mid || mid == to) {
		return;
	}
	var n = haxe_ds_ArraySort.gcd(to - from,mid - from);
	while(n-- != 0) {
		var val = a[from + n];
		var shift = mid - from;
		var p1 = from + n;
		var p2 = from + n + shift;
		while(p2 != from + n) {
			a[p1] = a[p2];
			p1 = p2;
			if(to - p2 > shift) {
				p2 += shift;
			} else {
				p2 = from + (shift - (to - p2));
			}
		}
		a[p1] = val;
	}
};
haxe_ds_ArraySort.gcd = function(m,n) {
	while(n != 0) {
		var t = m % n;
		m = n;
		n = t;
	}
	return m;
};
haxe_ds_ArraySort.upper = function(a,cmp,from,to,val) {
	var len = to - from;
	var half;
	var mid;
	while(len > 0) {
		half = len >> 1;
		mid = from + half;
		if(cmp(a[val],a[mid]) < 0) {
			len = half;
		} else {
			from = mid + 1;
			len = len - half - 1;
		}
	}
	return from;
};
haxe_ds_ArraySort.lower = function(a,cmp,from,to,val) {
	var len = to - from;
	var half;
	var mid;
	while(len > 0) {
		half = len >> 1;
		mid = from + half;
		if(cmp(a[mid],a[val]) < 0) {
			from = mid + 1;
			len = len - half - 1;
		} else {
			len = half;
		}
	}
	return from;
};
haxe_ds_ArraySort.swap = function(a,i,j) {
	var tmp = a[i];
	a[i] = a[j];
	a[j] = tmp;
};
var haxe_ds_BalancedTree = function() {
};
haxe_ds_BalancedTree.__name__ = true;
haxe_ds_BalancedTree.prototype = {
	set: function(key,value) {
		this.root = this.setLoop(key,value,this.root);
	}
	,get: function(key) {
		var node = this.root;
		while(node != null) {
			var c = this.compare(key,node.key);
			if(c == 0) {
				return node.value;
			}
			if(c < 0) {
				node = node.left;
			} else {
				node = node.right;
			}
		}
		return null;
	}
	,remove: function(key) {
		try {
			this.root = this.removeLoop(key,this.root);
			return true;
		} catch( e ) {
			var e1 = ((e) instanceof js__$Boot_HaxeError) ? e.val : e;
			if(typeof(e1) == "string") {
				var e2 = e1;
				return false;
			} else {
				throw e;
			}
		}
	}
	,exists: function(key) {
		var node = this.root;
		while(node != null) {
			var c = this.compare(key,node.key);
			if(c == 0) {
				return true;
			} else if(c < 0) {
				node = node.left;
			} else {
				node = node.right;
			}
		}
		return false;
	}
	,iterator: function() {
		var ret = [];
		this.iteratorLoop(this.root,ret);
		return HxOverrides.iter(ret);
	}
	,setLoop: function(k,v,node) {
		if(node == null) {
			return new haxe_ds_TreeNode(null,k,v,null);
		}
		var c = this.compare(k,node.key);
		if(c == 0) {
			return new haxe_ds_TreeNode(node.left,k,v,node.right,node == null ? 0 : node._height);
		} else if(c < 0) {
			var nl = this.setLoop(k,v,node.left);
			return this.balance(nl,node.key,node.value,node.right);
		} else {
			var nr = this.setLoop(k,v,node.right);
			return this.balance(node.left,node.key,node.value,nr);
		}
	}
	,removeLoop: function(k,node) {
		if(node == null) {
			throw new js__$Boot_HaxeError("Not_found");
		}
		var c = this.compare(k,node.key);
		if(c == 0) {
			return this.merge(node.left,node.right);
		} else if(c < 0) {
			return this.balance(this.removeLoop(k,node.left),node.key,node.value,node.right);
		} else {
			return this.balance(node.left,node.key,node.value,this.removeLoop(k,node.right));
		}
	}
	,iteratorLoop: function(node,acc) {
		if(node != null) {
			this.iteratorLoop(node.left,acc);
			acc.push(node.value);
			this.iteratorLoop(node.right,acc);
		}
	}
	,merge: function(t1,t2) {
		if(t1 == null) {
			return t2;
		}
		if(t2 == null) {
			return t1;
		}
		var t = this.minBinding(t2);
		return this.balance(t1,t.key,t.value,this.removeMinBinding(t2));
	}
	,minBinding: function(t) {
		if(t == null) {
			throw new js__$Boot_HaxeError("Not_found");
		} else if(t.left == null) {
			return t;
		} else {
			return this.minBinding(t.left);
		}
	}
	,removeMinBinding: function(t) {
		if(t.left == null) {
			return t.right;
		} else {
			return this.balance(this.removeMinBinding(t.left),t.key,t.value,t.right);
		}
	}
	,balance: function(l,k,v,r) {
		var hl = l == null ? 0 : l._height;
		var hr = r == null ? 0 : r._height;
		if(hl > hr + 2) {
			var _this = l.left;
			var _this1 = l.right;
			if((_this == null ? 0 : _this._height) >= (_this1 == null ? 0 : _this1._height)) {
				return new haxe_ds_TreeNode(l.left,l.key,l.value,new haxe_ds_TreeNode(l.right,k,v,r));
			} else {
				return new haxe_ds_TreeNode(new haxe_ds_TreeNode(l.left,l.key,l.value,l.right.left),l.right.key,l.right.value,new haxe_ds_TreeNode(l.right.right,k,v,r));
			}
		} else if(hr > hl + 2) {
			var _this2 = r.right;
			var _this3 = r.left;
			if((_this2 == null ? 0 : _this2._height) > (_this3 == null ? 0 : _this3._height)) {
				return new haxe_ds_TreeNode(new haxe_ds_TreeNode(l,k,v,r.left),r.key,r.value,r.right);
			} else {
				return new haxe_ds_TreeNode(new haxe_ds_TreeNode(l,k,v,r.left.left),r.left.key,r.left.value,new haxe_ds_TreeNode(r.left.right,r.key,r.value,r.right));
			}
		} else {
			return new haxe_ds_TreeNode(l,k,v,r,(hl > hr ? hl : hr) + 1);
		}
	}
	,compare: function(k1,k2) {
		return Reflect.compare(k1,k2);
	}
	,toString: function() {
		if(this.root == null) {
			return "{}";
		} else {
			return "{" + this.root.toString() + "}";
		}
	}
};
var haxe_ds_TreeNode = function(l,k,v,r,h) {
	if(h == null) {
		h = -1;
	}
	this.left = l;
	this.key = k;
	this.value = v;
	this.right = r;
	if(h == -1) {
		var tmp;
		var _this = this.left;
		var _this1 = this.right;
		if((_this == null ? 0 : _this._height) > (_this1 == null ? 0 : _this1._height)) {
			var _this2 = this.left;
			tmp = _this2 == null ? 0 : _this2._height;
		} else {
			var _this3 = this.right;
			tmp = _this3 == null ? 0 : _this3._height;
		}
		this._height = tmp + 1;
	} else {
		this._height = h;
	}
};
haxe_ds_TreeNode.__name__ = true;
haxe_ds_TreeNode.prototype = {
	toString: function() {
		return (this.left == null ? "" : this.left.toString() + ", ") + ("" + Std.string(this.key) + "=" + Std.string(this.value)) + (this.right == null ? "" : ", " + this.right.toString());
	}
};
var haxe_ds_BalancedTreeFunctor = function(oComparator) {
	haxe_ds_BalancedTree.call(this);
	this._oComparator = oComparator == null ? new sweet_functor_comparator_ReflectComparator() : oComparator;
};
haxe_ds_BalancedTreeFunctor.__name__ = true;
haxe_ds_BalancedTreeFunctor.__super__ = haxe_ds_BalancedTree;
haxe_ds_BalancedTreeFunctor.prototype = $extend(haxe_ds_BalancedTree.prototype,{
	compare: function(k1,k2) {
		return this._oComparator.apply(k1,k2);
	}
});
var haxe_ds_EnumValueMap = function() {
	haxe_ds_BalancedTree.call(this);
};
haxe_ds_EnumValueMap.__name__ = true;
haxe_ds_EnumValueMap.__super__ = haxe_ds_BalancedTree;
haxe_ds_EnumValueMap.prototype = $extend(haxe_ds_BalancedTree.prototype,{
	compare: function(k1,k2) {
		var d = k1._hx_index - k2._hx_index;
		if(d != 0) {
			return d;
		}
		var p1 = Type.enumParameters(k1);
		var p2 = Type.enumParameters(k2);
		if(p1.length == 0 && p2.length == 0) {
			return 0;
		}
		return this.compareArgs(p1,p2);
	}
	,compareArgs: function(a1,a2) {
		var ld = a1.length - a2.length;
		if(ld != 0) {
			return ld;
		}
		var _g = 0;
		var _g1 = a1.length;
		while(_g < _g1) {
			var i = _g++;
			var d = this.compareArg(a1[i],a2[i]);
			if(d != 0) {
				return d;
			}
		}
		return 0;
	}
	,compareArg: function(v1,v2) {
		if(Reflect.isEnumValue(v1) && Reflect.isEnumValue(v2)) {
			return this.compare(v1,v2);
		} else if(((v1) instanceof Array) && ((v2) instanceof Array)) {
			return this.compareArgs(v1,v2);
		} else {
			return Reflect.compare(v1,v2);
		}
	}
});
var haxe_ds_IntMap = function() {
	this.h = { };
};
haxe_ds_IntMap.__name__ = true;
haxe_ds_IntMap.prototype = {
	set: function(key,value) {
		this.h[key] = value;
	}
	,get: function(key) {
		return this.h[key];
	}
	,exists: function(key) {
		return this.h.hasOwnProperty(key);
	}
	,remove: function(key) {
		if(!this.h.hasOwnProperty(key)) {
			return false;
		}
		delete(this.h[key]);
		return true;
	}
	,keys: function() {
		var a = [];
		for( var key in this.h ) (this.h.hasOwnProperty(key) ? a.push(key | 0) : null);
		return HxOverrides.iter(a);
	}
	,iterator: function() {
		return { ref : this.h, it : this.keys(), hasNext : function() {
			return this.it.hasNext();
		}, next : function() {
			var i = this.it.next();
			return this.ref[i];
		}};
	}
	,toString: function() {
		var s_b = "";
		s_b += "{";
		var it = this.keys();
		var i = it;
		while(i.hasNext()) {
			var i1 = i.next();
			s_b += i1 == null ? "null" : "" + i1;
			s_b += " => ";
			s_b += Std.string(Std.string(this.h[i1]));
			if(it.hasNext()) {
				s_b += ", ";
			}
		}
		s_b += "}";
		return s_b;
	}
};
var haxe_ds_List = function() {
	this.length = 0;
};
haxe_ds_List.__name__ = true;
haxe_ds_List.prototype = {
	add: function(item) {
		var x = new haxe_ds__$List_ListNode(item,null);
		if(this.h == null) {
			this.h = x;
		} else {
			this.q.next = x;
		}
		this.q = x;
		this.length++;
	}
	,push: function(item) {
		var x = new haxe_ds__$List_ListNode(item,this.h);
		this.h = x;
		if(this.q == null) {
			this.q = x;
		}
		this.length++;
	}
	,pop: function() {
		if(this.h == null) {
			return null;
		}
		var x = this.h.item;
		this.h = this.h.next;
		if(this.h == null) {
			this.q = null;
		}
		this.length--;
		return x;
	}
	,isEmpty: function() {
		return this.h == null;
	}
	,iterator: function() {
		return new haxe_ds__$List_ListIterator(this.h);
	}
};
var haxe_ds__$List_ListNode = function(item,next) {
	this.item = item;
	this.next = next;
};
haxe_ds__$List_ListNode.__name__ = true;
var haxe_ds__$List_ListIterator = function(head) {
	this.head = head;
};
haxe_ds__$List_ListIterator.__name__ = true;
haxe_ds__$List_ListIterator.prototype = {
	hasNext: function() {
		return this.head != null;
	}
	,next: function() {
		var val = this.head.item;
		this.head = this.head.next;
		return val;
	}
};
var haxe_ds_RedBlackTree = function(oComparator) {
	this._oComparator = oComparator == null ? new sweet_functor_comparator_ReflectComparator() : oComparator;
	this._oRoot = null;
};
haxe_ds_RedBlackTree.__name__ = true;
haxe_ds_RedBlackTree.prototype = {
	copy: function() {
		throw new js__$Boot_HaxeError("not implemented");
	}
	,keyValueIterator: function() {
		throw new js__$Boot_HaxeError("not implemented");
	}
	,get: function(key) {
		if(key == null) {
			throw new js__$Boot_HaxeError("Key cannot be null");
		}
		if(this.isEmpty()) {
			return null;
		}
		return this._oRoot.get(key);
	}
	,iterator: function() {
		return new haxe_ds_TreeIterator(this._oRoot);
	}
	,getComparator: function() {
		return this._oComparator;
	}
	,getCount: function() {
		if(this.isEmpty()) {
			return 0;
		}
		return this._oRoot.getCount();
	}
	,isEmpty: function() {
		return this._oRoot == null;
	}
	,exists: function(key) {
		return this.get(key) != null;
	}
	,getHeight: function() {
		if(this.isEmpty()) {
			return 0;
		}
		return this._oRoot.getHeight();
	}
	,countByRange: function(lo,hi) {
		if(lo == null) {
			throw new js__$Boot_HaxeError("first argument to size() is null");
		}
		if(hi == null) {
			throw new js__$Boot_HaxeError("second argument to size() is null");
		}
		if(this._oComparator.apply(lo,hi) > 0) {
			return 0;
		}
		if(this.exists(hi)) {
			return this.getRank(hi) - this.getRank(lo) + 1;
		} else {
			return this.getRank(hi) - this.getRank(lo);
		}
	}
	,getRank: function(key) {
		if(key == null) {
			throw new js__$Boot_HaxeError("argument to rank() is null");
		}
		if(this.isEmpty()) {
			return 0;
		}
		return this._oRoot.getRank(key);
	}
	,getKeyByRank: function(iRank) {
		if(iRank < 0 || iRank >= this.getCount()) {
			throw new js__$Boot_HaxeError("argument to select() is invalid: " + iRank);
		}
		var x = this._oRoot.getByKeyRank(iRank);
		return x.getKey();
	}
	,keys: function() {
		if(this.isEmpty()) {
			return new haxe_ds__$List_ListIterator(new haxe_ds_List().h);
		}
		var oQueue = new haxe_ds_List();
		this._oRoot.getKeyList(oQueue,this.getKeyMin(),this.getKeyMax());
		return new haxe_ds__$List_ListIterator(oQueue.h);
	}
	,getKeyMin: function() {
		if(this.isEmpty()) {
			throw new js__$Boot_HaxeError("calls min() with empty symbol table");
		}
		return this._oRoot.getMin().getKey();
	}
	,getKeyMax: function() {
		if(this.isEmpty()) {
			throw new js__$Boot_HaxeError("calls max() with empty symbol table");
		}
		return this._oRoot.getMax().getKey();
	}
	,getKeyListByRange: function(min,max) {
		if(min == null) {
			throw new js__$Boot_HaxeError("first argument to keys() is null");
		}
		if(max == null) {
			throw new js__$Boot_HaxeError("second argument to keys() is null");
		}
		var queue = new haxe_ds_List();
		this._oRoot.getKeyList(queue,min,max);
		return queue;
	}
	,getKeyMinSuperiorTo: function(oMinKey) {
		if(oMinKey == null) {
			throw new js__$Boot_HaxeError("argument to ceiling() is null");
		}
		if(this.isEmpty()) {
			return null;
		}
		var x = this._oRoot.getByKeyMinSuperiorTo(oMinKey);
		if(x == null) {
			return null;
		} else {
			return x.getKey();
		}
	}
	,getKeyMaxInferiorTo: function(oKey) {
		if(oKey == null) {
			throw new js__$Boot_HaxeError("argument to ceiling() is null");
		}
		if(this.isEmpty()) {
			return null;
		}
		var x = this._oRoot.getByKeyMaxInferiorTo(oKey);
		if(x == null) {
			return null;
		} else {
			return x.getKey();
		}
	}
	,toString: function() {
		var s_b = "";
		s_b += "{";
		var it = this.keys();
		var _g = it;
		while(_g.head != null) {
			var val = _g.head.item;
			_g.head = _g.head.next;
			var i = val;
			s_b += Std.string(i);
			s_b += " => ";
			s_b += Std.string(Std.string(this.get(i)));
			if(it.head != null) {
				s_b += ", ";
			}
		}
		s_b += "}";
		return s_b;
	}
	,clear: function() {
		throw new js__$Boot_HaxeError("not implemented yet");
	}
	,set: function(key,value) {
		if(key == null) {
			throw new js__$Boot_HaxeError("Key cannot be null");
		}
		if(value == null) {
			this.remove(key);
			return;
		}
		if(this._oRoot == null) {
			this._oRoot = this.createNode(key,value);
			this._oRoot.setBlack();
			return;
		}
		this._oRoot = this._oRoot.set(key,value);
		this._oRoot.setBlack();
		return;
	}
	,remove: function(key) {
		if(key == null) {
			throw new js__$Boot_HaxeError("Key cannot be null");
		}
		if(!this.exists(key)) {
			return false;
		}
		if(this._oRoot.getLeft() != null && this._oRoot.getLeft().isBlack() && this._oRoot.getRight() != null && this._oRoot.getRight().isBlack()) {
			this._oRoot.setRed();
		}
		this._oRoot = this._oRoot.delete(key);
		if(!this.isEmpty()) {
			this._oRoot.setBlack();
		}
		return true;
	}
	,deleteMin: function() {
		if(this.isEmpty()) {
			throw new js__$Boot_HaxeError("BST underflow");
		}
		if(this._oRoot.getLeft().isBlack() && this._oRoot.getRight().isBlack()) {
			this._oRoot.setRed();
		}
		this._oRoot = this._oRoot.deleteMin();
		if(!this.isEmpty()) {
			this._oRoot.setBlack();
		}
	}
	,deleteMax: function() {
		if(this.isEmpty()) {
			throw new js__$Boot_HaxeError("BST underflow");
		}
		if(this._oRoot.getLeft().isBlack() && this._oRoot.getRight().isBlack()) {
			this._oRoot.setRed();
		}
		this._oRoot = this._oRoot.deleteMax();
		if(!this.isEmpty()) {
			this._oRoot.setBlack();
		}
	}
	,createNode: function(key_,value_) {
		return new haxe_ds_Node(this,key_,value_,haxe_ds_Node.RED,1);
	}
};
var haxe_ds_Node = function(oTree,key_,value_,color_,count_) {
	this.key = key_;
	this.value = value_;
	this._bColor = color_;
	this.count = count_;
	this._oTree = oTree;
	this._left = null;
	this._right = null;
};
haxe_ds_Node.__name__ = true;
haxe_ds_Node.prototype = {
	getLeft: function() {
		return this._left;
	}
	,getRight: function() {
		return this._right;
	}
	,getKey: function() {
		return this.key;
	}
	,getValue: function() {
		return this.value;
	}
	,getColor: function() {
		return this._bColor;
	}
	,getCount: function() {
		return this.count;
	}
	,isRed: function() {
		return this._bColor == haxe_ds_Node.RED;
	}
	,isBlack: function() {
		return this._bColor == haxe_ds_Node.BLACK;
	}
	,isRightRed: function() {
		var o = this.getRight();
		if(o == null) {
			return false;
		}
		return o.isRed();
	}
	,isLeftRed: function() {
		var o = this.getLeft();
		if(o == null) {
			return false;
		}
		return o.isRed();
	}
	,getTree: function() {
		return this._oTree;
	}
	,getHeight: function() {
		return 1 + haxe_IntTool.max(this.getLeft() != null ? this.getLeft().getHeight() : -1,this.getRight() != null ? this.getRight().getHeight() : -1);
	}
	,compareKey: function(key_) {
		return this.getTree().getComparator().apply(key_,this.key);
	}
	,get: function(key_) {
		var node = this;
		while(node != null) {
			var compare = node.compareKey(key_);
			if(compare < 0) {
				node = node.getLeft();
			} else if(compare > 0) {
				node = node.getRight();
			} else {
				return node.getValue();
			}
		}
		return null;
	}
	,getMin: function() {
		if(this.getLeft() == null) {
			return this;
		}
		return this.getLeft().getMin();
	}
	,getMax: function() {
		if(this.getRight() == null) {
			return this;
		}
		return this.getRight().getMax();
	}
	,getKeyList: function(queue,min,max) {
		var iCompareMin = this.compareKey(min);
		var iCompareMax = this.compareKey(max);
		if(iCompareMin <= 0 && iCompareMax >= 0) {
			queue.add(this.getKey());
		}
		if(iCompareMin < 0) {
			if(this.getLeft() == null) {
				return queue;
			}
			queue = this.getLeft().getKeyList(queue,min,max);
		}
		if(iCompareMax > 0) {
			if(this.getRight() == null) {
				return queue;
			}
			queue = this.getRight().getKeyList(queue,min,max);
		}
		return queue;
	}
	,getRank: function(key_) {
		var cmp = this.compareKey(key_);
		if(cmp < 0) {
			if(this.getLeft() == null) {
				return 0;
			}
			return this.getLeft().getRank(key_);
		} else if(cmp > 0) {
			if(this.getRight() == null) {
				return 1 + this.getLeft().getCount();
			}
			return 1 + this.getLeft().getCount() + this.getRight().getRank(key_);
		} else {
			return this.getLeft().getCount();
		}
	}
	,getByKeyRank: function(iRank) {
		var t = this.getLeft().getCount();
		if(t > iRank) {
			return this.getLeft().getByKeyRank(iRank);
		} else if(t < iRank) {
			return this.getRight().getByKeyRank(iRank - t - 1);
		} else {
			return this;
		}
	}
	,getByKeyMinSuperiorTo: function(oKey) {
		var cmp = this.compareKey(oKey);
		if(cmp == 0) {
			return this;
		}
		if(cmp > 0) {
			if(this.getRight() == null) {
				return null;
			} else {
				return this.getRight().getByKeyMinSuperiorTo(oKey);
			}
		}
		var t = this.getLeft() == null ? null : this.getLeft().getByKeyMinSuperiorTo(oKey);
		if(t != null) {
			return t;
		} else {
			return this;
		}
	}
	,getByKeyMaxInferiorTo: function(oKey) {
		var cmp = this.compareKey(oKey);
		if(cmp == 0) {
			return this;
		}
		if(cmp < 0) {
			if(this.getLeft() == null) {
				return null;
			} else {
				return this.getLeft().getByKeyMaxInferiorTo(oKey);
			}
		}
		var t = this.getRight() == null ? null : this.getRight().getByKeyMaxInferiorTo(oKey);
		if(t != null) {
			return t;
		} else {
			return this;
		}
	}
	,setLeft: function(oNode) {
		this._left = oNode;
		return this._left;
	}
	,setRight: function(oNode) {
		this._right = oNode;
		return this._right;
	}
	,setColor: function(b) {
		return this;
	}
	,setRed: function() {
		this._bColor = haxe_ds_Node.RED;
		return this;
	}
	,setBlack: function() {
		this._bColor = haxe_ds_Node.BLACK;
		return this;
	}
	,toggleColor: function() {
		this.setColor(!this.getColor());
		return this;
	}
	,flipColors: function() {
		this.toggleColor();
		this.getLeft().toggleColor();
		this.getRight().toggleColor();
		return this;
	}
	,updateCount: function() {
		this.count = (this.getLeft() == null ? 0 : this.getLeft().getCount()) + (this.getRight() == null ? 0 : this.getRight().getCount()) + 1;
		return this;
	}
	,rotateRight: function() {
		var oNewTopNode = this.getLeft();
		this.setLeft(oNewTopNode.getRight());
		oNewTopNode.setRight(this);
		oNewTopNode.setColor(oNewTopNode.getRight().getColor());
		oNewTopNode.getRight().setRed();
		oNewTopNode.count = this.getCount();
		this.updateCount();
		return oNewTopNode;
	}
	,rotateLeft: function() {
		var oNewTopNode = this.getRight();
		this.setRight(oNewTopNode.getLeft());
		oNewTopNode.setLeft(this);
		oNewTopNode.setColor(oNewTopNode.getLeft().getColor());
		oNewTopNode.getLeft().setRed();
		oNewTopNode.count = this.getCount();
		this.updateCount();
		return oNewTopNode;
	}
	,moveRedLeft: function() {
		this.flipColors();
		if(this.getRight().getLeft().isBlack()) {
			return this;
		}
		this.setRight(this.getRight().rotateRight());
		return this.rotateLeft().flipColors();
	}
	,moveRedRight: function() {
		this.flipColors();
		if(this.getLeft() != null && !this.getLeft().isLeftRed()) {
			return this;
		}
		return this.rotateRight().flipColors();
	}
	,balance: function() {
		var oNode = this;
		if(oNode.isRightRed()) {
			oNode = oNode.rotateLeft();
		}
		if(oNode.isLeftRed() && oNode.getLeft() != null && oNode.getLeft().getLeft() != null && oNode.getLeft().getLeft().isRed()) {
			oNode = oNode.rotateRight();
		}
		if(oNode.isLeftRed() && oNode.isRightRed()) {
			oNode.flipColors();
		}
		return oNode.updateCount();
	}
	,set: function(key_,value_) {
		var compare = this.compareKey(key_);
		if(compare < 0) {
			if(this.getLeft() == null) {
				this.setLeft(this.getTree().createNode(key_,value_));
			} else {
				this.setLeft(this.getLeft().set(key_,value_));
			}
		} else if(compare > 0) {
			if(this.getRight() == null) {
				this.setRight(this.getTree().createNode(key_,value_));
			} else {
				this.setRight(this.getRight().set(key_,value_));
			}
		} else {
			this.value = value_;
		}
		var node = this;
		if(node.isRightRed() && !node.isLeftRed()) {
			node = node.rotateLeft();
		}
		if(node.isLeftRed() && node.getLeft() != null && node.getLeft().isLeftRed()) {
			node = node.rotateRight();
		}
		if(node.isRightRed() && node.isLeftRed()) {
			node.flipColors();
		}
		node.updateCount();
		return node;
	}
	,'delete': function(key_) {
		var oNode = this;
		if(oNode.compareKey(key_) < 0) {
			if(oNode.getLeft() != null && oNode.getLeft().isBlack() && !oNode.getLeft().isLeftRed()) {
				oNode = oNode.moveRedLeft();
			}
			oNode.setLeft(oNode.getLeft().delete(key_));
		} else {
			if(oNode.isLeftRed()) {
				oNode = oNode.rotateRight();
			}
			if(oNode.compareKey(key_) == 0 && oNode.getRight() == null) {
				return null;
			}
			if(!oNode.isRightRed() && !oNode.getRight().isLeftRed()) {
				oNode = oNode.moveRedRight();
			}
			if(oNode.compareKey(key_) == 0) {
				var x = oNode.getRight().getMin();
				oNode.key = x.getKey();
				oNode.value = x.getValue();
				oNode.setRight(oNode.getRight().deleteMin());
			} else {
				oNode.setRight(oNode.getRight().delete(key_));
			}
		}
		return oNode.balance();
	}
	,deleteMin: function() {
		if(this.getLeft() == null) {
			return null;
		}
		var oNode = this;
		if(this.getLeft().isBlack() && !this.getLeft().isLeftRed()) {
			oNode = this.moveRedLeft();
		}
		oNode.setLeft(oNode.getLeft().deleteMin());
		var o = oNode.deleteMin();
		if(o != null) {
			o = o.balance();
		}
		return o;
	}
	,deleteMax: function() {
		var oNode = this;
		if(oNode.isLeftRed()) {
			oNode = oNode.rotateRight();
		}
		if(oNode.getRight() == null) {
			return null;
		}
		if(oNode.getRight().isBlack() && !oNode.getRight().isLeftRed()) {
			oNode = oNode.moveRedRight();
		}
		oNode.setRight(oNode.getRight().deleteMax());
		return oNode.balance();
	}
};
var haxe_ds_TreeIterator = function(oRoot) {
	this._lNode = new haxe_ds_List();
	if(oRoot != null) {
		this._lNode.add(oRoot);
	}
};
haxe_ds_TreeIterator.__name__ = true;
haxe_ds_TreeIterator.prototype = {
	hasNext: function() {
		return !this._lNode.isEmpty();
	}
	,next: function() {
		while(true) {
			var oNode = this._lNode.pop();
			if(oNode.getRight() != null) {
				this._lNode.push(oNode.getRight());
			}
			if(oNode.getLeft() != null) {
				this._lNode.push(oNode.getLeft());
			}
			return oNode.getValue();
		}
	}
};
var js__$Boot_HaxeError = function(val) {
	Error.call(this);
	this.val = val;
	if(Error.captureStackTrace) {
		Error.captureStackTrace(this,js__$Boot_HaxeError);
	}
};
js__$Boot_HaxeError.__name__ = true;
js__$Boot_HaxeError.wrap = function(val) {
	if(((val) instanceof Error)) {
		return val;
	} else {
		return new js__$Boot_HaxeError(val);
	}
};
js__$Boot_HaxeError.__super__ = Error;
js__$Boot_HaxeError.prototype = $extend(Error.prototype,{
});
var js_Boot = function() { };
js_Boot.__name__ = true;
js_Boot.__string_rec = function(o,s) {
	if(o == null) {
		return "null";
	}
	if(s.length >= 5) {
		return "<...>";
	}
	var t = typeof(o);
	if(t == "function" && (o.__name__ || o.__ename__)) {
		t = "object";
	}
	switch(t) {
	case "function":
		return "<function>";
	case "object":
		if(((o) instanceof Array)) {
			var str = "[";
			s += "\t";
			var _g3 = 0;
			var _g11 = o.length;
			while(_g3 < _g11) {
				var i = _g3++;
				str += (i > 0 ? "," : "") + js_Boot.__string_rec(o[i],s);
			}
			str += "]";
			return str;
		}
		var tostr;
		try {
			tostr = o.toString;
		} catch( e1 ) {
			var e2 = ((e1) instanceof js__$Boot_HaxeError) ? e1.val : e1;
			return "???";
		}
		if(tostr != null && tostr != Object.toString && typeof(tostr) == "function") {
			var s2 = o.toString();
			if(s2 != "[object Object]") {
				return s2;
			}
		}
		var str1 = "{\n";
		s += "\t";
		var hasp = o.hasOwnProperty != null;
		var k = null;
		for( k in o ) {
		if(hasp && !o.hasOwnProperty(k)) {
			continue;
		}
		if(k == "prototype" || k == "__class__" || k == "__super__" || k == "__interfaces__" || k == "__properties__") {
			continue;
		}
		if(str1.length != 2) {
			str1 += ", \n";
		}
		str1 += s + k + " : " + js_Boot.__string_rec(o[k],s);
		}
		s = s.substring(1);
		str1 += "\n" + s + "}";
		return str1;
	case "string":
		return o;
	default:
		return String(o);
	}
};
var pixi_plugins_app_Application = function() {
	this._animationFrameId = null;
	this.pixelRatio = 1;
	this.autoResize = true;
	this.transparent = false;
	this.antialias = false;
	this.forceFXAA = false;
	this.roundPixels = false;
	this.legacy = false;
	this.clearBeforeRender = true;
	this.preserveDrawingBuffer = false;
	this.backgroundColor = 16777215;
	this.width = window.innerWidth;
	this.height = window.innerHeight;
	this.position = "static";
};
pixi_plugins_app_Application.__name__ = true;
pixi_plugins_app_Application.prototype = {
	_setDefaultValues: function() {
		this._animationFrameId = null;
		this.pixelRatio = 1;
		this.autoResize = true;
		this.transparent = false;
		this.antialias = false;
		this.forceFXAA = false;
		this.roundPixels = false;
		this.legacy = false;
		this.clearBeforeRender = true;
		this.preserveDrawingBuffer = false;
		this.backgroundColor = 16777215;
		this.width = window.innerWidth;
		this.height = window.innerHeight;
		this.position = "static";
	}
	,start: function(rendererType,parentDom,canvasElement) {
		if(rendererType == null) {
			rendererType = "auto";
		}
		if(canvasElement == null) {
			this.canvas = window.document.createElement("canvas");
			this.canvas.style.width = this.width + "px";
			this.canvas.style.height = this.height + "px";
			this.canvas.style.position = this.position;
		} else {
			this.canvas = canvasElement;
		}
		if(this.autoResize) {
			window.onresize = $bind(this,this._onWindowResize);
		}
		var renderingOptions = { };
		renderingOptions.width = this.width | 0;
		renderingOptions.height = this.height | 0;
		renderingOptions.view = this.canvas;
		renderingOptions.backgroundColor = this.backgroundColor;
		renderingOptions.resolution = this.pixelRatio;
		renderingOptions.antialias = this.antialias;
		renderingOptions.forceFXAA = this.forceFXAA;
		renderingOptions.autoResize = this.autoResize;
		renderingOptions.transparent = this.transparent;
		renderingOptions.clearBeforeRender = this.clearBeforeRender;
		renderingOptions.preserveDrawingBuffer = this.preserveDrawingBuffer;
		renderingOptions.roundPixels = this.roundPixels;
		renderingOptions.legacy = this.legacy;
		if(rendererType == null) {
			this.app = new PIXI.Application(renderingOptions);
		} else if(rendererType == "canvas") {
			renderingOptions.forceCanvas = true;
			this.app = new PIXI.Application(renderingOptions);
		} else {
			this.app = new PIXI.Application(renderingOptions);
		}
		this.stage = this.app.stage;
		this.renderer = this.app.renderer;
		if(parentDom == null) {
			window.document.body.appendChild(this.app.view);
		} else {
			parentDom.appendChild(this.app.view);
		}
		this.app.ticker.add($bind(this,this._onRequestAnimationFrame));
	}
	,pauseRendering: function() {
		this.app.stop();
	}
	,resumeRendering: function() {
		this.app.start();
	}
	,_onWindowResize: function(event) {
		this.width = window.innerWidth;
		this.height = window.innerHeight;
		this.app.renderer.resize(this.width,this.height);
		this.canvas.style.width = this.width + "px";
		this.canvas.style.height = this.height + "px";
		if(this.onResize != null) {
			this.onResize();
		}
	}
	,_onRequestAnimationFrame: function() {
		if(this.onUpdate != null) {
			this.onUpdate(this.app.ticker.deltaTime);
		}
	}
	,addStats: function() {
		if(window.Perf != null) {
			var rendererType = this.app.renderer.type;
			var renderer;
			switch(rendererType) {
			case 1:
				renderer = "WEBGL";
				break;
			case 2:
				renderer = "CANVAS";
				break;
			default:
				renderer = "UNKNOWN";
			}
			new Perf().addInfo(renderer + " - " + this.pixelRatio);
		}
	}
};
var particle_Main = function() {
	var _gthis = this;
	pixi_plugins_app_Application.call(this);
	this.position = "fixed";
	this.width = window.innerWidth;
	this.height = window.innerHeight;
	this.backgroundColor = 26214;
	this.transparent = true;
	this.antialias = false;
	this.onUpdate = $bind(this,this._animate);
	pixi_plugins_app_Application.prototype.start.call(this);
	this._oModel = new particle_model_Model();
	this._oView = new particle_view_View(this.stage);
	this._aProcess = [new particle_process_Move(this._oModel,this._oView),new particle_process_Spawn(this._oModel,this._oView),new particle_process_SpaceRelativity(this._oModel,this._oView)];
	var timer = new haxe_Timer(50);
	timer.run = function() {
		try {
			var _g = 0;
			var _g1 = _gthis._aProcess;
			while(_g < _g1.length) {
				var oProcess = _g1[_g];
				++_g;
				oProcess.process();
			}
		} catch( e ) {
			var e1 = ((e) instanceof js__$Boot_HaxeError) ? e.val : e;
			timer.stop();
			throw js__$Boot_HaxeError.wrap(e1);
		}
	};
};
particle_Main.__name__ = true;
particle_Main.main = function() {
	new particle_Main();
};
particle_Main.__super__ = pixi_plugins_app_Application;
particle_Main.prototype = $extend(pixi_plugins_app_Application.prototype,{
	_animate: function(e) {
		this._oView.update();
	}
});
var particle_model_DirectionTool = function() { };
particle_model_DirectionTool.__name__ = true;
particle_model_DirectionTool.getAll = function() {
	return particle_model_DirectionTool.all;
};
particle_model_DirectionTool.getByVelocity = function(oVector) {
	var a = [];
	if(oVector.x > 0) {
		a.push(3);
	}
	if(oVector.x < 0) {
		a.push(2);
	}
	if(oVector.y > 0) {
		a.push(0);
	}
	if(oVector.y < 0) {
		a.push(1);
	}
	return a;
};
particle_model_DirectionTool.getReverse = function(oDirection) {
	switch(oDirection) {
	case 0:
		return 1;
	case 1:
		return 0;
	case 2:
		return 3;
	case 3:
		return 2;
	}
};
var particle_model_Grid = function(iWidth,iHeight) {
	this._iHeight = iHeight;
	this._iWidth = iWidth;
};
particle_model_Grid.__name__ = true;
particle_model_Grid.prototype = {
	getWidth: function() {
		return this._iWidth;
	}
	,getHeight: function() {
		return this._iHeight;
	}
};
var particle_model_Model = function() {
	this._oGrid = new particle_model_Grid(100,50);
	this._oIdGen = new particle_tool_UniqueIdGenerator();
	this.test = new haxe_ds_BalancedTreeFunctor();
	this._mParticle = new haxe_ds_BalancedTreeFunctor();
	this._mParticleListByVelDir = new haxe_ds_IntMap();
	this._mParticleListByVelDir.set(0,new haxe_ds_IntMap());
	this._mParticleListByVelDir.set(1,new haxe_ds_IntMap());
	this._mParticleListByVelDir.set(2,new haxe_ds_IntMap());
	this._mParticleListByVelDir.set(3,new haxe_ds_IntMap());
	this._mParticleByPosition = new haxe_ds_BalancedTreeFunctor(new particle_model_Vector2iComp());
};
particle_model_Model.__name__ = true;
particle_model_Model.prototype = {
	getGrid: function() {
		return this._oGrid;
	}
	,getParticle: function(iId) {
		return this._mParticle.get(iId);
	}
	,getParticleAll: function() {
		return this._mParticle;
	}
	,getParticleCount: function() {
		return Lambda.array(this._mParticle).length;
	}
	,getParticleByPosition: function(oVector) {
		return this._mParticleByPosition.get(oVector);
	}
	,getParticleListByVelDir: function(oDir) {
		return this._mParticleListByVelDir.get(oDir);
	}
	,addParticle: function(oParticle) {
		oParticle.setId(this._oIdGen.generate());
		this._mParticle.set(oParticle.getId(),oParticle);
		var _g = 0;
		var _g1 = particle_model_DirectionTool.getByVelocity(oParticle.getVelocity());
		while(_g < _g1.length) {
			var oDirection = _g1[_g];
			++_g;
			this._mParticleListByVelDir.get(oDirection).set(oParticle.getId(),oParticle);
		}
		var i = Lambda.count(this._mParticleByPosition);
		this._mParticleByPosition.set(oParticle.getPosition(),oParticle);
		if(Lambda.count(this._mParticleByPosition) != i + 1) {
			throw new js__$Boot_HaxeError("!!");
		}
		if(this._mParticleByPosition.get(oParticle.getPosition().clone()) != oParticle) {
			throw new js__$Boot_HaxeError("!!");
		}
	}
	,removeParticle: function(oParticle) {
		if(oParticle.getId() == null) {
			console.log("src/particle/model/Model.hx:98:","Warning: trying to remove particle with no identity");
			return;
		}
		this._mParticle.remove(oParticle.getId());
		var _g = 0;
		var _g1 = particle_model_DirectionTool.getAll();
		while(_g < _g1.length) {
			var oDirection = _g1[_g];
			++_g;
			this._mParticleListByVelDir.get(oDirection).remove(oParticle.getId());
		}
		this._mParticleByPosition.remove(oParticle.getPosition());
	}
	,setParticleVelocity: function(oParticle,oVector) {
		var _g = 0;
		var _g1 = particle_model_DirectionTool.getAll();
		while(_g < _g1.length) {
			var oDirection = _g1[_g];
			++_g;
			this._mParticleListByVelDir.get(oDirection).remove(oParticle.getId());
		}
		oParticle.setVelocity(oVector);
		var _g2 = 0;
		var _g3 = particle_model_DirectionTool.getByVelocity(oParticle.getVelocity());
		while(_g2 < _g3.length) {
			var oDirection1 = _g3[_g2];
			++_g2;
			this._mParticleListByVelDir.get(oDirection1).set(oParticle.getId(),oParticle);
		}
	}
	,setParticlePosition: function(oParticle,oVector) {
		if(this._mParticleByPosition.exists(oVector)) {
			throw new js__$Boot_HaxeError("!!!");
		}
		if(Lambda.count(this._mParticleByPosition) != Lambda.count(this._mParticle)) {
			console.log("src/particle/model/Model.hx:131:",this._mParticleByPosition.toString());
			console.log("src/particle/model/Model.hx:132:",this._mParticle.toString());
			throw new js__$Boot_HaxeError("!!!");
		}
		this._mParticleByPosition.remove(oParticle.getPosition());
		if(Lambda.count(this._mParticleByPosition) != Lambda.count(this._mParticle) - 1) {
			console.log("src/particle/model/Model.hx:138:",this._mParticleByPosition.toString());
			console.log("src/particle/model/Model.hx:139:",this._mParticle.toString());
			throw new js__$Boot_HaxeError("!!!");
		}
		oParticle.setPosition(oVector);
		this._mParticleByPosition.set(oParticle.getPosition(),oParticle);
	}
};
var particle_model_Vector2iComp = function() {
};
particle_model_Vector2iComp.__name__ = true;
particle_model_Vector2iComp.prototype = {
	apply: function(a,b) {
		if(a.equal(b)) {
			return 0;
		}
		if(a.toString() > b.toString()) {
			return 1;
		} else {
			return -1;
		}
	}
};
var particle_model_Particle = function(oPosition,oVelocity,iCharge) {
	if(iCharge == null) {
		iCharge = 0;
	}
	this._iId = null;
	this._oVelocity = oVelocity;
	this._oPosition = oPosition;
};
particle_model_Particle.__name__ = true;
particle_model_Particle.prototype = {
	getId: function() {
		return this._iId;
	}
	,getVelocity: function() {
		return this._oVelocity;
	}
	,getPosition: function() {
		return this._oPosition;
	}
	,setId: function(iId) {
		this._iId = iId;
	}
	,setPosition: function(oPosition) {
		this._oPosition = oPosition;
		return this;
	}
	,setVelocity: function(oVector) {
		this._oVelocity = oVector;
		return this;
	}
};
var particle_process_Move = function(oModel,oView) {
	this._oModel = oModel;
	this._oView = oView;
	this._iMaxSpeed = 10;
	this._iCurrentSpeed = 1;
};
particle_process_Move.__name__ = true;
particle_process_Move.prototype = {
	process: function() {
		var _g = 0;
		var _g1 = particle_model_DirectionTool.getAll();
		while(_g < _g1.length) {
			var oDirection = _g1[_g];
			++_g;
			var a = Lambda.array(this._oModel.getParticleListByVelDir(oDirection));
			haxe_ds_ArraySort.sort(a,this.sortingFunc(oDirection));
			var _g2 = 0;
			while(_g2 < a.length) {
				var oParticle = a[_g2];
				++_g2;
				this.move(oDirection,oParticle);
			}
		}
		this._iCurrentSpeed++;
		if(this._iCurrentSpeed > this._iMaxSpeed) {
			this._iCurrentSpeed = 1;
		}
	}
	,move: function(oDirection,oParticule) {
		var oPosition = oParticule.getPosition().clone();
		switch(oDirection) {
		case 0:
			if(oParticule.getVelocity().y < this._iCurrentSpeed) {
				return;
			}
			oPosition.y++;
			break;
		case 1:
			if(-oParticule.getVelocity().y < this._iCurrentSpeed) {
				return;
			}
			oPosition.y--;
			break;
		case 2:
			if(-oParticule.getVelocity().x < this._iCurrentSpeed) {
				return;
			}
			oPosition.x--;
			break;
		case 3:
			if(oParticule.getVelocity().x < this._iCurrentSpeed) {
				return;
			}
			oPosition.x++;
			break;
		}
		if(this.collisionCheck(oParticule,oPosition)) {
			return;
		}
		this._oModel.setParticlePosition(oParticule,oPosition);
		this._oView.updateParticle(oParticule);
	}
	,collisionCheck: function(oParticle,oPosition) {
		var o = this._oModel.getParticleByPosition(oPosition);
		if(o == null) {
			return false;
		}
		return true;
	}
	,sortingFunc: function(oDirection) {
		switch(oDirection) {
		case 0:
			return function(a,b) {
				return a.getVelocity().y - b.getVelocity().y;
			};
		case 1:
			return function(a1,b1) {
				return b1.getVelocity().y - a1.getVelocity().y;
			};
		case 2:
			return function(a2,b2) {
				return b2.getVelocity().x - a2.getVelocity().x;
			};
		case 3:
			return function(a3,b3) {
				return a3.getVelocity().x - b3.getVelocity().x;
			};
		}
	}
};
var particle_process_SpaceRelativity = function(oModel,oView) {
	this._oModel = oModel;
	this._oView = oView;
};
particle_process_SpaceRelativity.__name__ = true;
particle_process_SpaceRelativity.prototype = {
	process: function() {
		var aPair = [];
		var oParticleA = this._oModel.getParticleAll().iterator();
		while(oParticleA.hasNext()) {
			var oParticleA1 = oParticleA.next();
			var oParticleB = this._oModel.getParticleAll().iterator();
			while(oParticleB.hasNext()) {
				var oParticleB1 = oParticleB.next();
				if(oParticleA1.getId() >= oParticleB1.getId()) {
					continue;
				}
				aPair.push([oParticleA1,oParticleB1]);
			}
		}
		var _g = 0;
		while(_g < aPair.length) {
			var oPair = aPair[_g];
			++_g;
			var oDelta = new space_Vector2i(oPair[0].getPosition().x - oPair[1].getPosition().x,oPair[0].getPosition().y - oPair[1].getPosition().y);
			var iDist = oDelta.getTaxicabLength();
			if(iDist == 0) {
				throw new js__$Boot_HaxeError("!!");
			}
			oDelta.mult(0.5 / (iDist / 2));
			this._oModel.setParticleVelocity(oPair[1],this.maxSpeed(oDelta.clone().vector_add(oPair[1].getVelocity())));
			this._oModel.setParticleVelocity(oPair[0],this.maxSpeed(oDelta.clone().mult(-1).vector_add(oPair[0].getVelocity())));
		}
	}
	,maxSpeed: function(oVector) {
		oVector.x = this.clampBetween(oVector.x,-10,10);
		oVector.y = this.clampBetween(oVector.y,-10,10);
		return oVector;
	}
	,clampBetween: function(i,min,max) {
		if(i < min) {
			return min;
		}
		if(i > max) {
			return max;
		}
		return i;
	}
};
var particle_process_Spawn = function(oModel,oView) {
	this._oModel = oModel;
	this._oView = oView;
	this._iMax = 200;
	this._iStep = 1;
};
particle_process_Spawn.__name__ = true;
particle_process_Spawn.prototype = {
	process: function() {
		var iDelta = this._iMax - this._oModel.getParticleCount();
		if(iDelta <= 0) {
			return;
		}
		var _g = 0;
		var _g1 = haxe_IntTool.min(iDelta,this._iStep);
		while(_g < _g1) {
			var i = _g++;
			var oParticle = this.createParticle();
			var oPrevious = this._oModel.getParticleByPosition(oParticle.getPosition());
			if(oPrevious != null) {
				continue;
			}
			this._oModel.addParticle(oParticle);
			this._oView.updateParticle(oParticle);
		}
	}
	,createParticle: function() {
		var oGrid = this._oModel.getGrid();
		var iDeadZone = Math.floor(oGrid.getWidth() * 0.25);
		var oDirection = [3,0,2,1][Math.floor(Math.random() * 4)];
		var oPos = null;
		var oVel = null;
		switch(oDirection) {
		case 0:
			oPos = new space_Vector2i(this.randomBetween(iDeadZone,oGrid.getWidth() - iDeadZone),oGrid.getHeight());
			oVel = new space_Vector2i(this.randomBetween(-1,1),-1);
			break;
		case 1:
			oPos = new space_Vector2i(this.randomBetween(iDeadZone,oGrid.getWidth() - iDeadZone),0);
			oVel = new space_Vector2i(this.randomBetween(-1,1),1);
			break;
		case 2:
			oPos = new space_Vector2i(0,this.randomBetween(iDeadZone,oGrid.getHeight() - iDeadZone));
			oVel = new space_Vector2i(1,this.randomBetween(-1,1));
			break;
		case 3:
			oPos = new space_Vector2i(oGrid.getWidth(),this.randomBetween(iDeadZone,oGrid.getHeight() - iDeadZone));
			oVel = new space_Vector2i(-1,this.randomBetween(-1,1));
			break;
		}
		return new particle_model_Particle(oPos,oVel);
	}
	,randomBetween: function(min,max) {
		return Math.floor(Math.random() * (max + 1)) + min;
	}
};
var particle_tool_UniqueIdGenerator = function(_iIdOffset) {
	if(_iIdOffset == null) {
		_iIdOffset = 0;
	}
	this._iId = _iIdOffset;
};
particle_tool_UniqueIdGenerator.__name__ = true;
particle_tool_UniqueIdGenerator.prototype = {
	setOffset: function(_iIdOffset) {
		this._iId = _iIdOffset;
	}
	,generate: function() {
		return this._iId++;
	}
};
var particle_view_ParticleView = function(oParticle) {
	this._oParticle = oParticle;
	this._oContainer = new PIXI.Graphics();
	this._oContainer.beginFill(16711680,0.4);
	this._oContainer.drawRect(particle_view_ParticleView.SCALE / 2,particle_view_ParticleView.SCALE / 2,particle_view_ParticleView.SCALE,particle_view_ParticleView.SCALE);
	this._oContainer.endFill();
	this._oVelocity = new PIXI.Graphics();
	this._oVelocity.lineStyle(2,16777215);
	this._oVelocity.beginFill(3525722,1);
	this._oVelocity.moveTo(0,0);
	this._oVelocity.lineTo(this._oParticle.getVelocity().x * particle_view_ParticleView.SCALE,this._oParticle.getVelocity().y * particle_view_ParticleView.SCALE);
	this._oVelocity.endFill();
	this._oContainer.addChild(this._oVelocity);
};
particle_view_ParticleView.__name__ = true;
particle_view_ParticleView.prototype = {
	getContainer: function() {
		return this._oContainer;
	}
	,update: function() {
		this._oVelocity.clear();
		this._oVelocity.lineStyle(2,16711935);
		this._oVelocity.beginFill(3525722,1);
		this._oVelocity.moveTo(0,0);
		this._oVelocity.lineTo(this._oParticle.getVelocity().x * particle_view_ParticleView.SCALE,this._oParticle.getVelocity().y * particle_view_ParticleView.SCALE);
		this._oVelocity.endFill();
		this._oContainer.position.set(this._oParticle.getPosition().x * particle_view_ParticleView.SCALE,this._oParticle.getPosition().y * particle_view_ParticleView.SCALE);
	}
};
var particle_view_View = function(oStage) {
	this._oStage = oStage;
	this._mParticleView = new haxe_ds_IntMap();
	this._lUpdateStack = new haxe_ds_List();
};
particle_view_View.__name__ = true;
particle_view_View.prototype = {
	updateParticle: function(oParticle) {
		this._lUpdateStack.push(oParticle);
	}
	,removeParticle: function(oParticle) {
		var _this = this._mParticleView;
		var key = oParticle.getId();
		if(!_this.h.hasOwnProperty(key)) {
			return;
		}
		var tmp = this._oStage;
		var _this1 = this._mParticleView;
		var key1 = oParticle.getId();
		tmp.removeChild(_this1.h[key1].getContainer());
		this._mParticleView.remove(oParticle.getId());
	}
	,update: function() {
		var oParticle = null;
		while(true) {
			oParticle = this._lUpdateStack.pop();
			if(!(oParticle != null)) {
				break;
			}
			var oView;
			var _this = this._mParticleView;
			var key = oParticle.getId();
			if(!_this.h.hasOwnProperty(key)) {
				var o = new PIXI.Graphics();
				o.beginFill(16711680,0.4);
				o.drawRect(-5,-5,10,10);
				o.endFill();
				oView = new particle_view_ParticleView(oParticle);
				this._oStage.addChild(oView.getContainer());
				var _this1 = this._mParticleView;
				var key1 = oParticle.getId();
				_this1.h[key1] = oView;
			} else {
				var _this2 = this._mParticleView;
				var key2 = oParticle.getId();
				oView = _this2.h[key2];
			}
			oView.update();
		}
	}
};
var space_Vector2i = function(x_,y_) {
	if(y_ == null) {
		y_ = 0;
	}
	if(x_ == null) {
		x_ = 0;
	}
	this.set(x_,y_);
};
space_Vector2i.__name__ = true;
space_Vector2i.compare = function(a,oVector) {
	console.log("src/space/Vector2i.hx:115:","ok");
	if(a.equal(oVector)) {
		return 0;
	}
	if(a.toString() > oVector.toString()) {
		return 1;
	} else {
		return -1;
	}
};
space_Vector2i.distance = function(v1,v2) {
	var dx = v1.x - v2.x;
	var dy = v1.y - v2.y;
	return Math.sqrt(dx * dx + dy * dy);
};
space_Vector2i.distanceSqed = function(v1,v2) {
	var dx = v1.x - v2.x;
	var dy = v1.y - v2.y;
	return dx * dx + dy * dy;
};
space_Vector2i.distanceOcto = function(v1,v2) {
	var dx = Math.abs(v1.x - v2.x);
	var dy = Math.abs(v1.y - v2.y);
	return (dx + dy + Math.max(dx,dy)) * 0.5;
};
space_Vector2i.prototype = {
	clone: function() {
		return new space_Vector2i(this.x,this.y);
	}
	,copy: function(oVector) {
		return this.set(oVector.x,oVector.y);
	}
	,length_get: function() {
		return Math.sqrt(this.x * this.x + this.y * this.y);
	}
	,dotProduct: function(v) {
		return this.x * v.x + this.y * v.y;
	}
	,distance_get: function(oVector) {
		return space_Vector2i.distance(this,oVector);
	}
	,distanceSqed_get: function(oVector) {
		return space_Vector2i.distanceSqed(this,oVector);
	}
	,getTaxicabLength: function() {
		return Math.abs(this.x) + Math.abs(this.y);
	}
	,toString: function() {
		return this.x + ":" + this.y;
	}
	,set: function(x_,y_) {
		if(y_ == null) {
			y_ = 0;
		}
		this.x = x_;
		this.y = y_;
		return this;
	}
	,add: function(x_,y_) {
		if(y_ == null) {
			y_ = 0;
		}
		this.x += x_;
		this.y += y_;
		return this;
	}
	,vector_add: function(oVector) {
		return this.add(oVector.x,oVector.y);
	}
	,mult: function(fMultiplicator) {
		this.x = Math.round(this.x * fMultiplicator);
		this.y = Math.round(this.y * fMultiplicator);
		return this;
	}
	,divide: function(fDivisor) {
		if(fDivisor == 0) {
			throw new js__$Boot_HaxeError("[ERROR] Vector3 : can not divide by 0.");
		}
		return this.mult(Math.round(1 / fDivisor));
	}
	,normalize: function() {
		this.divide(this.length_get());
		return this;
	}
	,length_set: function(fLength) {
		if(fLength < 0) {
			throw new js__$Boot_HaxeError("Invalid length : " + fLength);
		}
		var length = this.length_get();
		if(length == 0) {
			this.x = Math.round(fLength);
		} else {
			this.mult(fLength / length);
		}
		return this;
	}
	,project: function(oVector) {
		var fDotprod = oVector.dotProduct(this);
		this.copy(oVector).length_set(Math.abs(fDotprod) / oVector.length_get());
		return this;
	}
	,equal: function(oVector) {
		if(oVector.x == this.x) {
			return oVector.y == this.y;
		} else {
			return false;
		}
	}
	,angleAxisXY: function() {
		if(this.x == 0 && this.y == 0) {
			return null;
		}
		return Math.atan2(this.y,this.x);
	}
};
var sweet_functor_comparator_ReflectComparator = function() {
};
sweet_functor_comparator_ReflectComparator.__name__ = true;
sweet_functor_comparator_ReflectComparator.prototype = {
	apply: function(a,b) {
		return Reflect.compare(a,b);
	}
};
function $getIterator(o) { if( o instanceof Array ) return HxOverrides.iter(o); else return o.iterator(); }
var $_;
function $bind(o,m) { if( m == null ) return null; if( m.__id__ == null ) m.__id__ = $global.$haxeUID++; var f; if( o.hx__closures__ == null ) o.hx__closures__ = {}; else f = o.hx__closures__[m.__id__]; if( f == null ) { f = m.bind(o); o.hx__closures__[m.__id__] = f; } return f; }
$global.$haxeUID |= 0;
String.__name__ = true;
Array.__name__ = true;
Date.__name__ = "Date";
Object.defineProperty(js__$Boot_HaxeError.prototype,"message",{ get : function() {
	return String(this.val);
}});
js_Boot.__toStr = ({ }).toString;
Perf.MEASUREMENT_INTERVAL = 1000;
Perf.FONT_FAMILY = "Helvetica,Arial";
Perf.FPS_BG_CLR = "#00FF00";
Perf.FPS_WARN_BG_CLR = "#FF8000";
Perf.FPS_PROB_BG_CLR = "#FF0000";
Perf.MS_BG_CLR = "#FFFF00";
Perf.MEM_BG_CLR = "#086A87";
Perf.INFO_BG_CLR = "#00FFFF";
Perf.FPS_TXT_CLR = "#000000";
Perf.MS_TXT_CLR = "#000000";
Perf.MEM_TXT_CLR = "#FFFFFF";
Perf.INFO_TXT_CLR = "#000000";
Perf.TOP_LEFT = "TL";
Perf.TOP_RIGHT = "TR";
Perf.BOTTOM_LEFT = "BL";
Perf.BOTTOM_RIGHT = "BR";
Perf.DELAY_TIME = 4000;
haxe_ds_Node.RED = true;
haxe_ds_Node.BLACK = false;
pixi_plugins_app_Application.AUTO = "auto";
pixi_plugins_app_Application.RECOMMENDED = "recommended";
pixi_plugins_app_Application.CANVAS = "canvas";
pixi_plugins_app_Application.WEBGL = "webgl";
pixi_plugins_app_Application.POSITION_STATIC = "static";
pixi_plugins_app_Application.POSITION_ABSOLUTE = "absolute";
pixi_plugins_app_Application.POSITION_FIXED = "fixed";
pixi_plugins_app_Application.POSITION_RELATIVE = "relative";
pixi_plugins_app_Application.POSITION_INITIAL = "initial";
pixi_plugins_app_Application.POSITION_INHERIT = "inherit";
particle_model_DirectionTool.all = [3,0,2,1];
particle_view_ParticleView.SCALE = 10;
particle_Main.main();
})(typeof exports != "undefined" ? exports : typeof window != "undefined" ? window : typeof self != "undefined" ? self : this, typeof window != "undefined" ? window : typeof global != "undefined" ? global : typeof self != "undefined" ? self : this);
