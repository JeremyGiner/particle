// Generated by Haxe 4.0.5
(function ($hx_exports, $global) { "use strict";
var $estr = function() { return js_Boot.__string_rec(this,''); },$hxEnums = $hxEnums || {},$_;
function $extend(from, fields) {
	var proto = Object.create(from);
	for (var name in fields) proto[name] = fields[name];
	if( fields.toString !== Object.prototype.toString ) proto.toString = fields.toString;
	return proto;
}
var EReg = function(r,opt) {
	this.r = new RegExp(r,opt.split("u").join(""));
};
EReg.__name__ = true;
EReg.prototype = {
	match: function(s) {
		if(this.r.global) {
			this.r.lastIndex = 0;
		}
		this.r.m = this.r.exec(s);
		this.r.s = s;
		return this.r.m != null;
	}
	,matched: function(n) {
		if(this.r.m != null && n >= 0 && n < this.r.m.length) {
			return this.r.m[n];
		} else {
			throw new js__$Boot_HaxeError("EReg::matched");
		}
	}
	,matchedRight: function() {
		if(this.r.m == null) {
			throw new js__$Boot_HaxeError("No string matched");
		}
		var sz = this.r.m.index + this.r.m[0].length;
		return HxOverrides.substr(this.r.s,sz,this.r.s.length - sz);
	}
	,matchedPos: function() {
		if(this.r.m == null) {
			throw new js__$Boot_HaxeError("No string matched");
		}
		return { pos : this.r.m.index, len : this.r.m[0].length};
	}
};
var HxOverrides = function() { };
HxOverrides.__name__ = true;
HxOverrides.cca = function(s,index) {
	var x = s.charCodeAt(index);
	if(x != x) {
		return undefined;
	}
	return x;
};
HxOverrides.substr = function(s,pos,len) {
	if(len == null) {
		len = s.length;
	} else if(len < 0) {
		if(pos == 0) {
			len = s.length + len;
		} else {
			return "";
		}
	}
	return s.substr(pos,len);
};
HxOverrides.iter = function(a) {
	return { cur : 0, arr : a, hasNext : function() {
		return this.cur < this.arr.length;
	}, next : function() {
		return this.arr[this.cur++];
	}};
};
var Lambda = function() { };
Lambda.__name__ = true;
Lambda.array = function(it) {
	var a = [];
	var i = $getIterator(it);
	while(i.hasNext()) {
		var i1 = i.next();
		a.push(i1);
	}
	return a;
};
Lambda.count = function(it,pred) {
	var n = 0;
	if(pred == null) {
		var _ = $getIterator(it);
		while(_.hasNext()) {
			var _1 = _.next();
			++n;
		}
	} else {
		var x = $getIterator(it);
		while(x.hasNext()) {
			var x1 = x.next();
			if(pred(x1)) {
				++n;
			}
		}
	}
	return n;
};
Math.__name__ = true;
var Perf = $hx_exports["Perf"] = function(pos,offset) {
	if(offset == null) {
		offset = 0;
	}
	if(pos == null) {
		pos = "TR";
	}
	this._perfObj = window.performance;
	if(Reflect.field(this._perfObj,"memory") != null) {
		this._memoryObj = Reflect.field(this._perfObj,"memory");
	}
	this._memCheck = this._perfObj != null && this._memoryObj != null && this._memoryObj.totalJSHeapSize > 0;
	this._pos = pos;
	this._offset = offset;
	this.currentFps = 60;
	this.currentMs = 0;
	this.currentMem = "0";
	this.lowFps = 60;
	this.avgFps = 60;
	this._measureCount = 0;
	this._totalFps = 0;
	this._time = 0;
	this._ticks = 0;
	this._fpsMin = 60;
	this._fpsMax = 60;
	this._startTime = this._perfObj != null && this._perfObj.now != null ? this._perfObj.now() : new Date().getTime();
	this._prevTime = -Perf.MEASUREMENT_INTERVAL;
	this._createFpsDom();
	this._createMsDom();
	if(this._memCheck) {
		this._createMemoryDom();
	}
	if(window.requestAnimationFrame != null) {
		this.RAF = ($_=window,$bind($_,$_.requestAnimationFrame));
	} else if(window.mozRequestAnimationFrame != null) {
		this.RAF = window.mozRequestAnimationFrame;
	} else if(window.webkitRequestAnimationFrame != null) {
		this.RAF = window.webkitRequestAnimationFrame;
	} else if(window.msRequestAnimationFrame != null) {
		this.RAF = window.msRequestAnimationFrame;
	}
	if(window.cancelAnimationFrame != null) {
		this.CAF = ($_=window,$bind($_,$_.cancelAnimationFrame));
	} else if(window.mozCancelAnimationFrame != null) {
		this.CAF = window.mozCancelAnimationFrame;
	} else if(window.webkitCancelAnimationFrame != null) {
		this.CAF = window.webkitCancelAnimationFrame;
	} else if(window.msCancelAnimationFrame != null) {
		this.CAF = window.msCancelAnimationFrame;
	}
	if(this.RAF != null) {
		this._raf = this.RAF.apply(window,[$bind(this,this._tick)]);
	}
};
Perf.__name__ = true;
Perf.prototype = {
	_init: function() {
		this.currentFps = 60;
		this.currentMs = 0;
		this.currentMem = "0";
		this.lowFps = 60;
		this.avgFps = 60;
		this._measureCount = 0;
		this._totalFps = 0;
		this._time = 0;
		this._ticks = 0;
		this._fpsMin = 60;
		this._fpsMax = 60;
		this._startTime = this._perfObj != null && this._perfObj.now != null ? this._perfObj.now() : new Date().getTime();
		this._prevTime = -Perf.MEASUREMENT_INTERVAL;
	}
	,_now: function() {
		if(this._perfObj != null && this._perfObj.now != null) {
			return this._perfObj.now();
		} else {
			return new Date().getTime();
		}
	}
	,_tick: function(val) {
		var time = this._perfObj != null && this._perfObj.now != null ? this._perfObj.now() : new Date().getTime();
		this._ticks++;
		if(this._raf != null && time > this._prevTime + Perf.MEASUREMENT_INTERVAL) {
			this.currentMs = Math.round(time - this._startTime);
			this.ms.innerHTML = "MS: " + this.currentMs;
			this.currentFps = Math.round(this._ticks * 1000 / (time - this._prevTime));
			if(this.currentFps > 0 && val > Perf.DELAY_TIME) {
				this._measureCount++;
				this._totalFps += this.currentFps;
				this.lowFps = this._fpsMin = Math.min(this._fpsMin,this.currentFps);
				this._fpsMax = Math.max(this._fpsMax,this.currentFps);
				this.avgFps = Math.round(this._totalFps / this._measureCount);
			}
			this.fps.innerHTML = "FPS: " + this.currentFps + " (" + this._fpsMin + "-" + this._fpsMax + ")";
			if(this.currentFps >= 30) {
				this.fps.style.backgroundColor = Perf.FPS_BG_CLR;
			} else if(this.currentFps >= 15) {
				this.fps.style.backgroundColor = Perf.FPS_WARN_BG_CLR;
			} else {
				this.fps.style.backgroundColor = Perf.FPS_PROB_BG_CLR;
			}
			this._prevTime = time;
			this._ticks = 0;
			if(this._memCheck) {
				this.currentMem = this._getFormattedSize(this._memoryObj.usedJSHeapSize,2);
				this.memory.innerHTML = "MEM: " + this.currentMem;
			}
		}
		this._startTime = time;
		if(this._raf != null) {
			this._raf = this.RAF.apply(window,[$bind(this,this._tick)]);
		}
	}
	,_createDiv: function(id,top) {
		if(top == null) {
			top = 0;
		}
		var div = window.document.createElement("div");
		div.id = id;
		div.className = id;
		div.style.position = "absolute";
		switch(this._pos) {
		case "BL":
			div.style.left = this._offset + "px";
			div.style.bottom = (this._memCheck ? 48 : 32) - top + "px";
			break;
		case "BR":
			div.style.right = this._offset + "px";
			div.style.bottom = (this._memCheck ? 48 : 32) - top + "px";
			break;
		case "TL":
			div.style.left = this._offset + "px";
			div.style.top = top + "px";
			break;
		case "TR":
			div.style.right = this._offset + "px";
			div.style.top = top + "px";
			break;
		}
		div.style.width = "80px";
		div.style.height = "12px";
		div.style.lineHeight = "12px";
		div.style.padding = "2px";
		div.style.fontFamily = Perf.FONT_FAMILY;
		div.style.fontSize = "9px";
		div.style.fontWeight = "bold";
		div.style.textAlign = "center";
		window.document.body.appendChild(div);
		return div;
	}
	,_createFpsDom: function() {
		this.fps = this._createDiv("fps");
		this.fps.style.backgroundColor = Perf.FPS_BG_CLR;
		this.fps.style.zIndex = "995";
		this.fps.style.color = Perf.FPS_TXT_CLR;
		this.fps.innerHTML = "FPS: 0";
	}
	,_createMsDom: function() {
		this.ms = this._createDiv("ms",16);
		this.ms.style.backgroundColor = Perf.MS_BG_CLR;
		this.ms.style.zIndex = "996";
		this.ms.style.color = Perf.MS_TXT_CLR;
		this.ms.innerHTML = "MS: 0";
	}
	,_createMemoryDom: function() {
		this.memory = this._createDiv("memory",32);
		this.memory.style.backgroundColor = Perf.MEM_BG_CLR;
		this.memory.style.color = Perf.MEM_TXT_CLR;
		this.memory.style.zIndex = "997";
		this.memory.innerHTML = "MEM: 0";
	}
	,_getFormattedSize: function(bytes,frac) {
		if(frac == null) {
			frac = 0;
		}
		var sizes = ["Bytes","KB","MB","GB","TB"];
		if(bytes == 0) {
			return "0";
		}
		var precision = Math.pow(10,frac);
		var i = Math.floor(Math.log(bytes) / Math.log(1024));
		return Math.round(bytes * precision / Math.pow(1024,i)) / precision + " " + sizes[i];
	}
	,addInfo: function(val) {
		this.info = this._createDiv("info",this._memCheck ? 48 : 32);
		this.info.style.backgroundColor = Perf.INFO_BG_CLR;
		this.info.style.color = Perf.INFO_TXT_CLR;
		this.info.style.zIndex = "998";
		this.info.innerHTML = val;
	}
	,clearInfo: function() {
		if(this.info != null) {
			window.document.body.removeChild(this.info);
			this.info = null;
		}
	}
	,destroy: function() {
		this.CAF.apply(window,[this._raf]);
		this._raf = null;
		this._perfObj = null;
		this._memoryObj = null;
		if(this.fps != null) {
			window.document.body.removeChild(this.fps);
			this.fps = null;
		}
		if(this.ms != null) {
			window.document.body.removeChild(this.ms);
			this.ms = null;
		}
		if(this.memory != null) {
			window.document.body.removeChild(this.memory);
			this.memory = null;
		}
		this.clearInfo();
		this.currentFps = 60;
		this.currentMs = 0;
		this.currentMem = "0";
		this.lowFps = 60;
		this.avgFps = 60;
		this._measureCount = 0;
		this._totalFps = 0;
		this._time = 0;
		this._ticks = 0;
		this._fpsMin = 60;
		this._fpsMax = 60;
		this._startTime = this._perfObj != null && this._perfObj.now != null ? this._perfObj.now() : new Date().getTime();
		this._prevTime = -Perf.MEASUREMENT_INTERVAL;
	}
	,_cancelRAF: function() {
		this.CAF.apply(window,[this._raf]);
		this._raf = null;
	}
};
var Reflect = function() { };
Reflect.__name__ = true;
Reflect.field = function(o,field) {
	try {
		return o[field];
	} catch( e ) {
		var e1 = ((e) instanceof js__$Boot_HaxeError) ? e.val : e;
		return null;
	}
};
Reflect.getProperty = function(o,field) {
	var tmp;
	if(o == null) {
		return null;
	} else {
		var tmp1;
		if(o.__properties__) {
			tmp = o.__properties__["get_" + field];
			tmp1 = tmp;
		} else {
			tmp1 = false;
		}
		if(tmp1) {
			return o[tmp]();
		} else {
			return o[field];
		}
	}
};
Reflect.compare = function(a,b) {
	if(a == b) {
		return 0;
	} else if(a > b) {
		return 1;
	} else {
		return -1;
	}
};
Reflect.isEnumValue = function(v) {
	if(v != null) {
		return v.__enum__ != null;
	} else {
		return false;
	}
};
var Std = function() { };
Std.__name__ = true;
Std.string = function(s) {
	return js_Boot.__string_rec(s,"");
};
Std.parseInt = function(x) {
	if(x != null) {
		var _g = 0;
		var _g1 = x.length;
		while(_g < _g1) {
			var i = _g++;
			var c = x.charCodeAt(i);
			if(c <= 8 || c >= 14 && c != 32 && c != 45) {
				var v = parseInt(x, (x[(i + 1)]=="x" || x[(i + 1)]=="X") ? 16 : 10);
				if(isNaN(v)) {
					return null;
				} else {
					return v;
				}
			}
		}
	}
	return null;
};
var StringBuf = function() {
	this.b = "";
};
StringBuf.__name__ = true;
var StringTools = function() { };
StringTools.__name__ = true;
StringTools.isSpace = function(s,pos) {
	var c = HxOverrides.cca(s,pos);
	if(!(c > 8 && c < 14)) {
		return c == 32;
	} else {
		return true;
	}
};
StringTools.ltrim = function(s) {
	var l = s.length;
	var r = 0;
	while(r < l && StringTools.isSpace(s,r)) ++r;
	if(r > 0) {
		return HxOverrides.substr(s,r,l - r);
	} else {
		return s;
	}
};
StringTools.rtrim = function(s) {
	var l = s.length;
	var r = 0;
	while(r < l && StringTools.isSpace(s,l - r - 1)) ++r;
	if(r > 0) {
		return HxOverrides.substr(s,0,l - r);
	} else {
		return s;
	}
};
StringTools.trim = function(s) {
	return StringTools.ltrim(StringTools.rtrim(s));
};
var Type = function() { };
Type.__name__ = true;
Type.enumParameters = function(e) {
	var enm = $hxEnums[e.__enum__];
	var ctorName = enm.__constructs__[e._hx_index];
	var params = enm[ctorName].__params__;
	if(params != null) {
		var _g = [];
		var _g1 = 0;
		while(_g1 < params.length) {
			var p = params[_g1];
			++_g1;
			_g.push(e[p]);
		}
		return _g;
	} else {
		return [];
	}
};
var haxe_StackItem = $hxEnums["haxe.StackItem"] = { __ename__ : true, __constructs__ : ["CFunction","Module","FilePos","Method","LocalFunction"]
	,CFunction: {_hx_index:0,__enum__:"haxe.StackItem",toString:$estr}
	,Module: ($_=function(m) { return {_hx_index:1,m:m,__enum__:"haxe.StackItem",toString:$estr}; },$_.__params__ = ["m"],$_)
	,FilePos: ($_=function(s,file,line,column) { return {_hx_index:2,s:s,file:file,line:line,column:column,__enum__:"haxe.StackItem",toString:$estr}; },$_.__params__ = ["s","file","line","column"],$_)
	,Method: ($_=function(classname,method) { return {_hx_index:3,classname:classname,method:method,__enum__:"haxe.StackItem",toString:$estr}; },$_.__params__ = ["classname","method"],$_)
	,LocalFunction: ($_=function(v) { return {_hx_index:4,v:v,__enum__:"haxe.StackItem",toString:$estr}; },$_.__params__ = ["v"],$_)
};
var haxe_CallStack = function() { };
haxe_CallStack.__name__ = true;
haxe_CallStack.getStack = function(e) {
	if(e == null) {
		return [];
	}
	var oldValue = Error.prepareStackTrace;
	Error.prepareStackTrace = function(error,callsites) {
		var stack = [];
		var _g = 0;
		while(_g < callsites.length) {
			var site = callsites[_g];
			++_g;
			if(haxe_CallStack.wrapCallSite != null) {
				site = haxe_CallStack.wrapCallSite(site);
			}
			var method = null;
			var fullName = site.getFunctionName();
			if(fullName != null) {
				var idx = fullName.lastIndexOf(".");
				if(idx >= 0) {
					var className = HxOverrides.substr(fullName,0,idx);
					var methodName = HxOverrides.substr(fullName,idx + 1,null);
					method = haxe_StackItem.Method(className,methodName);
				}
			}
			var fileName = site.getFileName();
			var fileAddr = fileName == null ? -1 : fileName.indexOf("file:");
			if(haxe_CallStack.wrapCallSite != null && fileAddr > 0) {
				fileName = HxOverrides.substr(fileName,fileAddr + 6,null);
			}
			stack.push(haxe_StackItem.FilePos(method,fileName,site.getLineNumber(),site.getColumnNumber()));
		}
		return stack;
	};
	var a = haxe_CallStack.makeStack(e.stack);
	Error.prepareStackTrace = oldValue;
	return a;
};
haxe_CallStack.callStack = function() {
	try {
		throw new Error();
	} catch( e ) {
		var e1 = ((e) instanceof js__$Boot_HaxeError) ? e.val : e;
		var a = haxe_CallStack.getStack(e);
		a.shift();
		return a;
	}
};
haxe_CallStack.makeStack = function(s) {
	if(s == null) {
		return [];
	} else if(typeof(s) == "string") {
		var stack = s.split("\n");
		if(stack[0] == "Error") {
			stack.shift();
		}
		var m = [];
		var rie10 = new EReg("^   at ([A-Za-z0-9_. ]+) \\(([^)]+):([0-9]+):([0-9]+)\\)$","");
		var _g = 0;
		while(_g < stack.length) {
			var line = stack[_g];
			++_g;
			if(rie10.match(line)) {
				var path = rie10.matched(1).split(".");
				var meth = path.pop();
				var file = rie10.matched(2);
				var line1 = Std.parseInt(rie10.matched(3));
				var column = Std.parseInt(rie10.matched(4));
				m.push(haxe_StackItem.FilePos(meth == "Anonymous function" ? haxe_StackItem.LocalFunction() : meth == "Global code" ? null : haxe_StackItem.Method(path.join("."),meth),file,line1,column));
			} else {
				m.push(haxe_StackItem.Module(StringTools.trim(line)));
			}
		}
		return m;
	} else {
		return s;
	}
};
var haxe_IntTool = function() { };
haxe_IntTool.__name__ = true;
haxe_IntTool.max = function(a,b) {
	if(a > b) {
		return a;
	} else {
		return b;
	}
};
haxe_IntTool.min = function(a,b) {
	if(a < b) {
		return a;
	} else {
		return b;
	}
};
var haxe_Resource = function() { };
haxe_Resource.__name__ = true;
haxe_Resource.getString = function(name) {
	var _g = 0;
	var _g1 = haxe_Resource.content;
	while(_g < _g1.length) {
		var x = _g1[_g];
		++_g;
		if(x.name == name) {
			if(x.str != null) {
				return x.str;
			}
			var b = haxe_crypto_Base64.decode(x.data);
			return b.toString();
		}
	}
	return null;
};
var haxe__$Template_TemplateExpr = $hxEnums["haxe._Template.TemplateExpr"] = { __ename__ : true, __constructs__ : ["OpVar","OpExpr","OpIf","OpStr","OpBlock","OpForeach","OpMacro"]
	,OpVar: ($_=function(v) { return {_hx_index:0,v:v,__enum__:"haxe._Template.TemplateExpr",toString:$estr}; },$_.__params__ = ["v"],$_)
	,OpExpr: ($_=function(expr) { return {_hx_index:1,expr:expr,__enum__:"haxe._Template.TemplateExpr",toString:$estr}; },$_.__params__ = ["expr"],$_)
	,OpIf: ($_=function(expr,eif,eelse) { return {_hx_index:2,expr:expr,eif:eif,eelse:eelse,__enum__:"haxe._Template.TemplateExpr",toString:$estr}; },$_.__params__ = ["expr","eif","eelse"],$_)
	,OpStr: ($_=function(str) { return {_hx_index:3,str:str,__enum__:"haxe._Template.TemplateExpr",toString:$estr}; },$_.__params__ = ["str"],$_)
	,OpBlock: ($_=function(l) { return {_hx_index:4,l:l,__enum__:"haxe._Template.TemplateExpr",toString:$estr}; },$_.__params__ = ["l"],$_)
	,OpForeach: ($_=function(expr,loop) { return {_hx_index:5,expr:expr,loop:loop,__enum__:"haxe._Template.TemplateExpr",toString:$estr}; },$_.__params__ = ["expr","loop"],$_)
	,OpMacro: ($_=function(name,params) { return {_hx_index:6,name:name,params:params,__enum__:"haxe._Template.TemplateExpr",toString:$estr}; },$_.__params__ = ["name","params"],$_)
};
var haxe_Template = function(str) {
	var tokens = this.parseTokens(str);
	this.expr = this.parseBlock(tokens);
	if(!tokens.isEmpty()) {
		throw new js__$Boot_HaxeError("Unexpected '" + Std.string(tokens.first().s) + "'");
	}
};
haxe_Template.__name__ = true;
haxe_Template.prototype = {
	execute: function(context,macros) {
		this.macros = macros == null ? { } : macros;
		this.context = context;
		this.stack = new haxe_ds_List();
		this.buf = new StringBuf();
		this.run(this.expr);
		return this.buf.b;
	}
	,resolve: function(v) {
		if(v == "__current__") {
			return this.context;
		}
		var value = Reflect.getProperty(this.context,v);
		if(value != null || Object.prototype.hasOwnProperty.call(this.context,v)) {
			return value;
		}
		var _g_head = this.stack.h;
		while(_g_head != null) {
			var val = _g_head.item;
			_g_head = _g_head.next;
			var ctx = val;
			value = Reflect.getProperty(ctx,v);
			if(value != null || Object.prototype.hasOwnProperty.call(ctx,v)) {
				return value;
			}
		}
		return Reflect.field(haxe_Template.globals,v);
	}
	,parseTokens: function(data) {
		var tokens = new haxe_ds_List();
		while(haxe_Template.splitter.match(data)) {
			var p = haxe_Template.splitter.matchedPos();
			if(p.pos > 0) {
				tokens.add({ p : HxOverrides.substr(data,0,p.pos), s : true, l : null});
			}
			if(HxOverrides.cca(data,p.pos) == 58) {
				tokens.add({ p : HxOverrides.substr(data,p.pos + 2,p.len - 4), s : false, l : null});
				data = haxe_Template.splitter.matchedRight();
				continue;
			}
			var parp = p.pos + p.len;
			var npar = 1;
			var params = [];
			var part = "";
			while(true) {
				var c = HxOverrides.cca(data,parp);
				++parp;
				if(c == 40) {
					++npar;
				} else if(c == 41) {
					--npar;
					if(npar <= 0) {
						break;
					}
				} else if(c == null) {
					throw new js__$Boot_HaxeError("Unclosed macro parenthesis");
				}
				if(c == 44 && npar == 1) {
					params.push(part);
					part = "";
				} else {
					part += String.fromCodePoint(c);
				}
			}
			params.push(part);
			tokens.add({ p : haxe_Template.splitter.matched(2), s : false, l : params});
			data = HxOverrides.substr(data,parp,data.length - parp);
		}
		if(data.length > 0) {
			tokens.add({ p : data, s : true, l : null});
		}
		return tokens;
	}
	,parseBlock: function(tokens) {
		var l = new haxe_ds_List();
		while(true) {
			var t = tokens.first();
			if(t == null) {
				break;
			}
			if(!t.s && (t.p == "end" || t.p == "else" || HxOverrides.substr(t.p,0,7) == "elseif ")) {
				break;
			}
			l.add(this.parse(tokens));
		}
		if(l.length == 1) {
			return l.first();
		}
		return haxe__$Template_TemplateExpr.OpBlock(l);
	}
	,parse: function(tokens) {
		var t = tokens.pop();
		var p = t.p;
		if(t.s) {
			return haxe__$Template_TemplateExpr.OpStr(p);
		}
		if(t.l != null) {
			var pe = new haxe_ds_List();
			var _g = 0;
			var _g1 = t.l;
			while(_g < _g1.length) {
				var p1 = _g1[_g];
				++_g;
				pe.add(this.parseBlock(this.parseTokens(p1)));
			}
			return haxe__$Template_TemplateExpr.OpMacro(p,pe);
		}
		var kwdEnd = function(kwd) {
			var pos = -1;
			var length = kwd.length;
			if(HxOverrides.substr(p,0,length) == kwd) {
				pos = length;
				var _g_offset = 0;
				var _g_s = HxOverrides.substr(p,length,null);
				while(_g_offset < _g_s.length) {
					var c = _g_s.charCodeAt(_g_offset++);
					if(c == 32) {
						++pos;
					} else {
						break;
					}
				}
			}
			return pos;
		};
		var pos1 = kwdEnd("if");
		if(pos1 > 0) {
			p = HxOverrides.substr(p,pos1,p.length - pos1);
			var e = this.parseExpr(p);
			var eif = this.parseBlock(tokens);
			var t1 = tokens.first();
			var eelse;
			if(t1 == null) {
				throw new js__$Boot_HaxeError("Unclosed 'if'");
			}
			if(t1.p == "end") {
				tokens.pop();
				eelse = null;
			} else if(t1.p == "else") {
				tokens.pop();
				eelse = this.parseBlock(tokens);
				t1 = tokens.pop();
				if(t1 == null || t1.p != "end") {
					throw new js__$Boot_HaxeError("Unclosed 'else'");
				}
			} else {
				t1.p = HxOverrides.substr(t1.p,4,t1.p.length - 4);
				eelse = this.parse(tokens);
			}
			return haxe__$Template_TemplateExpr.OpIf(e,eif,eelse);
		}
		var pos2 = kwdEnd("foreach");
		if(pos2 >= 0) {
			p = HxOverrides.substr(p,pos2,p.length - pos2);
			var e1 = this.parseExpr(p);
			var efor = this.parseBlock(tokens);
			var t2 = tokens.pop();
			if(t2 == null || t2.p != "end") {
				throw new js__$Boot_HaxeError("Unclosed 'foreach'");
			}
			return haxe__$Template_TemplateExpr.OpForeach(e1,efor);
		}
		if(haxe_Template.expr_splitter.match(p)) {
			return haxe__$Template_TemplateExpr.OpExpr(this.parseExpr(p));
		}
		return haxe__$Template_TemplateExpr.OpVar(p);
	}
	,parseExpr: function(data) {
		var l = new haxe_ds_List();
		var expr = data;
		while(haxe_Template.expr_splitter.match(data)) {
			var p = haxe_Template.expr_splitter.matchedPos();
			var k = p.pos + p.len;
			if(p.pos != 0) {
				l.add({ p : HxOverrides.substr(data,0,p.pos), s : true});
			}
			var p1 = haxe_Template.expr_splitter.matched(0);
			l.add({ p : p1, s : p1.indexOf("\"") >= 0});
			data = haxe_Template.expr_splitter.matchedRight();
		}
		if(data.length != 0) {
			var _g_offset = 0;
			var _g_s = data;
			while(_g_offset < _g_s.length) {
				var _g1_key = _g_offset;
				var _g1_value = _g_s.charCodeAt(_g_offset++);
				var i = _g1_key;
				var c = _g1_value;
				if(c != 32) {
					l.add({ p : HxOverrides.substr(data,i,null), s : true});
					break;
				}
			}
		}
		var e;
		try {
			e = this.makeExpr(l);
			if(!l.isEmpty()) {
				throw new js__$Boot_HaxeError(l.first().p);
			}
		} catch( s ) {
			var s1 = ((s) instanceof js__$Boot_HaxeError) ? s.val : s;
			if(typeof(s1) == "string") {
				throw new js__$Boot_HaxeError("Unexpected '" + s1 + "' in " + expr);
			} else {
				throw s;
			}
		}
		return function() {
			try {
				return e();
			} catch( exc ) {
				throw new js__$Boot_HaxeError("Error : " + Std.string(((exc) instanceof js__$Boot_HaxeError) ? exc.val : exc) + " in " + expr);
			}
		};
	}
	,makeConst: function(v) {
		haxe_Template.expr_trim.match(v);
		v = haxe_Template.expr_trim.matched(1);
		if(HxOverrides.cca(v,0) == 34) {
			var str = HxOverrides.substr(v,1,v.length - 2);
			return function() {
				return str;
			};
		}
		if(haxe_Template.expr_int.match(v)) {
			var i = Std.parseInt(v);
			return function() {
				return i;
			};
		}
		if(haxe_Template.expr_float.match(v)) {
			var f = parseFloat(v);
			return function() {
				return f;
			};
		}
		var me = this;
		return function() {
			return me.resolve(v);
		};
	}
	,makePath: function(e,l) {
		var p = l.first();
		if(p == null || p.p != ".") {
			return e;
		}
		l.pop();
		var field = l.pop();
		if(field == null || !field.s) {
			throw new js__$Boot_HaxeError(field.p);
		}
		var f = field.p;
		haxe_Template.expr_trim.match(f);
		f = haxe_Template.expr_trim.matched(1);
		return this.makePath(function() {
			return Reflect.field(e(),f);
		},l);
	}
	,makeExpr: function(l) {
		return this.makePath(this.makeExpr2(l),l);
	}
	,skipSpaces: function(l) {
		var p = l.first();
		while(p != null) {
			var _g_offset = 0;
			var _g_s = p.p;
			while(_g_offset < _g_s.length) {
				var c = _g_s.charCodeAt(_g_offset++);
				if(c != 32) {
					return;
				}
			}
			l.pop();
			p = l.first();
		}
	}
	,makeExpr2: function(l) {
		this.skipSpaces(l);
		var p = l.pop();
		this.skipSpaces(l);
		if(p == null) {
			throw new js__$Boot_HaxeError("<eof>");
		}
		if(p.s) {
			return this.makeConst(p.p);
		}
		switch(p.p) {
		case "!":
			var e = this.makeExpr(l);
			return function() {
				var v = e();
				if(v != null) {
					return v == false;
				} else {
					return true;
				}
			};
		case "(":
			this.skipSpaces(l);
			var e1 = this.makeExpr(l);
			this.skipSpaces(l);
			var p1 = l.pop();
			if(p1 == null || p1.s) {
				throw new js__$Boot_HaxeError(p1);
			}
			if(p1.p == ")") {
				return e1;
			}
			this.skipSpaces(l);
			var e2 = this.makeExpr(l);
			this.skipSpaces(l);
			var p2 = l.pop();
			this.skipSpaces(l);
			if(p2 == null || p2.p != ")") {
				throw new js__$Boot_HaxeError(p2);
			}
			switch(p1.p) {
			case "!=":
				return function() {
					return e1() != e2();
				};
			case "&&":
				return function() {
					return e1() && e2();
				};
			case "*":
				return function() {
					return e1() * e2();
				};
			case "+":
				return function() {
					return e1() + e2();
				};
			case "-":
				return function() {
					return e1() - e2();
				};
			case "/":
				return function() {
					return e1() / e2();
				};
			case "<":
				return function() {
					return e1() < e2();
				};
			case "<=":
				return function() {
					return e1() <= e2();
				};
			case "==":
				return function() {
					return e1() == e2();
				};
			case ">":
				return function() {
					return e1() > e2();
				};
			case ">=":
				return function() {
					return e1() >= e2();
				};
			case "||":
				return function() {
					return e1() || e2();
				};
			default:
				throw new js__$Boot_HaxeError("Unknown operation " + p1.p);
			}
			break;
		case "-":
			var e3 = this.makeExpr(l);
			return function() {
				return -e3();
			};
		}
		throw new js__$Boot_HaxeError(p.p);
	}
	,run: function(e) {
		switch(e._hx_index) {
		case 0:
			var v = e.v;
			var _this = this.buf;
			var x = Std.string(this.resolve(v));
			_this.b += Std.string(x);
			break;
		case 1:
			var e1 = e.expr;
			var _this1 = this.buf;
			var x1 = Std.string(e1());
			_this1.b += Std.string(x1);
			break;
		case 2:
			var eelse = e.eelse;
			var eif = e.eif;
			var e2 = e.expr;
			var v1 = e2();
			if(v1 == null || v1 == false) {
				if(eelse != null) {
					this.run(eelse);
				}
			} else {
				this.run(eif);
			}
			break;
		case 3:
			var str = e.str;
			this.buf.b += str == null ? "null" : "" + str;
			break;
		case 4:
			var l = e.l;
			var _g_head = l.h;
			while(_g_head != null) {
				var val = _g_head.item;
				_g_head = _g_head.next;
				var e3 = val;
				this.run(e3);
			}
			break;
		case 5:
			var loop = e.loop;
			var e4 = e.expr;
			var v2 = e4();
			try {
				var x2 = $getIterator(v2);
				if(x2.hasNext == null) {
					throw new js__$Boot_HaxeError(null);
				}
				v2 = x2;
			} catch( e5 ) {
				var e6 = ((e5) instanceof js__$Boot_HaxeError) ? e5.val : e5;
				try {
					if(v2.hasNext == null) {
						throw new js__$Boot_HaxeError(null);
					}
				} catch( e7 ) {
					var e8 = ((e7) instanceof js__$Boot_HaxeError) ? e7.val : e7;
					throw new js__$Boot_HaxeError("Cannot iter on " + Std.string(v2));
				}
			}
			this.stack.push(this.context);
			var v3 = v2;
			var ctx = v3;
			while(ctx.hasNext()) {
				var ctx1 = ctx.next();
				this.context = ctx1;
				this.run(loop);
			}
			this.context = this.stack.pop();
			break;
		case 6:
			var params = e.params;
			var m = e.name;
			var v4 = Reflect.field(this.macros,m);
			var pl = [];
			var old = this.buf;
			pl.push($bind(this,this.resolve));
			var _g_head1 = params.h;
			while(_g_head1 != null) {
				var val1 = _g_head1.item;
				_g_head1 = _g_head1.next;
				var p = val1;
				if(p._hx_index == 0) {
					var v5 = p.v;
					pl.push(this.resolve(v5));
				} else {
					this.buf = new StringBuf();
					this.run(p);
					pl.push(this.buf.b);
				}
			}
			this.buf = old;
			try {
				var _this2 = this.buf;
				var x3 = Std.string(v4.apply(this.macros,pl));
				_this2.b += Std.string(x3);
			} catch( e9 ) {
				var e10 = ((e9) instanceof js__$Boot_HaxeError) ? e9.val : e9;
				var plstr;
				try {
					plstr = pl.join(",");
				} catch( e11 ) {
					var e12 = ((e11) instanceof js__$Boot_HaxeError) ? e11.val : e11;
					plstr = "???";
				}
				var msg = "Macro call " + m + "(" + plstr + ") failed (" + Std.string(e10) + ")";
				throw new js__$Boot_HaxeError(msg);
			}
			break;
		}
	}
};
var haxe_Timer = function(time_ms) {
	var me = this;
	this.id = setInterval(function() {
		me.run();
	},time_ms);
};
haxe_Timer.__name__ = true;
haxe_Timer.delay = function(f,time_ms) {
	var t = new haxe_Timer(time_ms);
	t.run = function() {
		t.stop();
		f();
	};
	return t;
};
haxe_Timer.prototype = {
	stop: function() {
		if(this.id == null) {
			return;
		}
		clearInterval(this.id);
		this.id = null;
	}
	,run: function() {
	}
};
var haxe_io_Bytes = function(data) {
	this.length = data.byteLength;
	this.b = new Uint8Array(data);
	this.b.bufferValue = data;
	data.hxBytes = this;
	data.bytes = this.b;
};
haxe_io_Bytes.__name__ = true;
haxe_io_Bytes.ofString = function(s,encoding) {
	if(encoding == haxe_io_Encoding.RawNative) {
		var buf = new Uint8Array(s.length << 1);
		var _g = 0;
		var _g1 = s.length;
		while(_g < _g1) {
			var i = _g++;
			var c = s.charCodeAt(i);
			buf[i << 1] = c & 255;
			buf[i << 1 | 1] = c >> 8;
		}
		return new haxe_io_Bytes(buf.buffer);
	}
	var a = [];
	var i1 = 0;
	while(i1 < s.length) {
		var c1 = s.charCodeAt(i1++);
		if(55296 <= c1 && c1 <= 56319) {
			c1 = c1 - 55232 << 10 | s.charCodeAt(i1++) & 1023;
		}
		if(c1 <= 127) {
			a.push(c1);
		} else if(c1 <= 2047) {
			a.push(192 | c1 >> 6);
			a.push(128 | c1 & 63);
		} else if(c1 <= 65535) {
			a.push(224 | c1 >> 12);
			a.push(128 | c1 >> 6 & 63);
			a.push(128 | c1 & 63);
		} else {
			a.push(240 | c1 >> 18);
			a.push(128 | c1 >> 12 & 63);
			a.push(128 | c1 >> 6 & 63);
			a.push(128 | c1 & 63);
		}
	}
	return new haxe_io_Bytes(new Uint8Array(a).buffer);
};
haxe_io_Bytes.prototype = {
	getString: function(pos,len,encoding) {
		if(pos < 0 || len < 0 || pos + len > this.length) {
			throw new js__$Boot_HaxeError(haxe_io_Error.OutsideBounds);
		}
		if(encoding == null) {
			encoding = haxe_io_Encoding.UTF8;
		}
		var s = "";
		var b = this.b;
		var i = pos;
		var max = pos + len;
		switch(encoding._hx_index) {
		case 0:
			var debug = pos > 0;
			while(i < max) {
				var c = b[i++];
				if(c < 128) {
					if(c == 0) {
						break;
					}
					s += String.fromCodePoint(c);
				} else if(c < 224) {
					var code = (c & 63) << 6 | b[i++] & 127;
					s += String.fromCodePoint(code);
				} else if(c < 240) {
					var c2 = b[i++];
					var code1 = (c & 31) << 12 | (c2 & 127) << 6 | b[i++] & 127;
					s += String.fromCodePoint(code1);
				} else {
					var c21 = b[i++];
					var c3 = b[i++];
					var u = (c & 15) << 18 | (c21 & 127) << 12 | (c3 & 127) << 6 | b[i++] & 127;
					s += String.fromCodePoint(u);
				}
			}
			break;
		case 1:
			while(i < max) {
				var c1 = b[i++] | b[i++] << 8;
				s += String.fromCodePoint(c1);
			}
			break;
		}
		return s;
	}
	,toString: function() {
		return this.getString(0,this.length);
	}
};
var haxe_io_Encoding = $hxEnums["haxe.io.Encoding"] = { __ename__ : true, __constructs__ : ["UTF8","RawNative"]
	,UTF8: {_hx_index:0,__enum__:"haxe.io.Encoding",toString:$estr}
	,RawNative: {_hx_index:1,__enum__:"haxe.io.Encoding",toString:$estr}
};
var haxe_crypto_Base64 = function() { };
haxe_crypto_Base64.__name__ = true;
haxe_crypto_Base64.decode = function(str,complement) {
	if(complement == null) {
		complement = true;
	}
	if(complement) {
		while(HxOverrides.cca(str,str.length - 1) == 61) str = HxOverrides.substr(str,0,-1);
	}
	return new haxe_crypto_BaseCode(haxe_crypto_Base64.BYTES).decodeBytes(haxe_io_Bytes.ofString(str));
};
var haxe_crypto_BaseCode = function(base) {
	var len = base.length;
	var nbits = 1;
	while(len > 1 << nbits) ++nbits;
	if(nbits > 8 || len != 1 << nbits) {
		throw new js__$Boot_HaxeError("BaseCode : base length must be a power of two.");
	}
	this.base = base;
	this.nbits = nbits;
};
haxe_crypto_BaseCode.__name__ = true;
haxe_crypto_BaseCode.prototype = {
	initTable: function() {
		var tbl = [];
		var _g = 0;
		while(_g < 256) {
			var i = _g++;
			tbl[i] = -1;
		}
		var _g1 = 0;
		var _g2 = this.base.length;
		while(_g1 < _g2) {
			var i1 = _g1++;
			tbl[this.base.b[i1]] = i1;
		}
		this.tbl = tbl;
	}
	,decodeBytes: function(b) {
		var nbits = this.nbits;
		var base = this.base;
		if(this.tbl == null) {
			this.initTable();
		}
		var tbl = this.tbl;
		var size = b.length * nbits >> 3;
		var out = new haxe_io_Bytes(new ArrayBuffer(size));
		var buf = 0;
		var curbits = 0;
		var pin = 0;
		var pout = 0;
		while(pout < size) {
			while(curbits < 8) {
				curbits += nbits;
				buf <<= nbits;
				var i = tbl[b.b[pin++]];
				if(i == -1) {
					throw new js__$Boot_HaxeError("BaseCode : invalid encoded char");
				}
				buf |= i;
			}
			curbits -= 8;
			out.b[pout++] = buf >> curbits & 255;
		}
		return out;
	}
};
var haxe_ds_ArraySort = function() { };
haxe_ds_ArraySort.__name__ = true;
haxe_ds_ArraySort.sort = function(a,cmp) {
	haxe_ds_ArraySort.rec(a,cmp,0,a.length);
};
haxe_ds_ArraySort.rec = function(a,cmp,from,to) {
	var middle = from + to >> 1;
	if(to - from < 12) {
		if(to <= from) {
			return;
		}
		var _g = from + 1;
		var _g1 = to;
		while(_g < _g1) {
			var i = _g++;
			var j = i;
			while(j > from) {
				if(cmp(a[j],a[j - 1]) < 0) {
					haxe_ds_ArraySort.swap(a,j - 1,j);
				} else {
					break;
				}
				--j;
			}
		}
		return;
	}
	haxe_ds_ArraySort.rec(a,cmp,from,middle);
	haxe_ds_ArraySort.rec(a,cmp,middle,to);
	haxe_ds_ArraySort.doMerge(a,cmp,from,middle,to,middle - from,to - middle);
};
haxe_ds_ArraySort.doMerge = function(a,cmp,from,pivot,to,len1,len2) {
	var first_cut;
	var second_cut;
	var len11;
	var len22;
	if(len1 == 0 || len2 == 0) {
		return;
	}
	if(len1 + len2 == 2) {
		if(cmp(a[pivot],a[from]) < 0) {
			haxe_ds_ArraySort.swap(a,pivot,from);
		}
		return;
	}
	if(len1 > len2) {
		len11 = len1 >> 1;
		first_cut = from + len11;
		second_cut = haxe_ds_ArraySort.lower(a,cmp,pivot,to,first_cut);
		len22 = second_cut - pivot;
	} else {
		len22 = len2 >> 1;
		second_cut = pivot + len22;
		first_cut = haxe_ds_ArraySort.upper(a,cmp,from,pivot,second_cut);
		len11 = first_cut - from;
	}
	haxe_ds_ArraySort.rotate(a,cmp,first_cut,pivot,second_cut);
	var new_mid = first_cut + len22;
	haxe_ds_ArraySort.doMerge(a,cmp,from,first_cut,new_mid,len11,len22);
	haxe_ds_ArraySort.doMerge(a,cmp,new_mid,second_cut,to,len1 - len11,len2 - len22);
};
haxe_ds_ArraySort.rotate = function(a,cmp,from,mid,to) {
	if(from == mid || mid == to) {
		return;
	}
	var n = haxe_ds_ArraySort.gcd(to - from,mid - from);
	while(n-- != 0) {
		var val = a[from + n];
		var shift = mid - from;
		var p1 = from + n;
		var p2 = from + n + shift;
		while(p2 != from + n) {
			a[p1] = a[p2];
			p1 = p2;
			if(to - p2 > shift) {
				p2 += shift;
			} else {
				p2 = from + (shift - (to - p2));
			}
		}
		a[p1] = val;
	}
};
haxe_ds_ArraySort.gcd = function(m,n) {
	while(n != 0) {
		var t = m % n;
		m = n;
		n = t;
	}
	return m;
};
haxe_ds_ArraySort.upper = function(a,cmp,from,to,val) {
	var len = to - from;
	var half;
	var mid;
	while(len > 0) {
		half = len >> 1;
		mid = from + half;
		if(cmp(a[val],a[mid]) < 0) {
			len = half;
		} else {
			from = mid + 1;
			len = len - half - 1;
		}
	}
	return from;
};
haxe_ds_ArraySort.lower = function(a,cmp,from,to,val) {
	var len = to - from;
	var half;
	var mid;
	while(len > 0) {
		half = len >> 1;
		mid = from + half;
		if(cmp(a[mid],a[val]) < 0) {
			from = mid + 1;
			len = len - half - 1;
		} else {
			len = half;
		}
	}
	return from;
};
haxe_ds_ArraySort.swap = function(a,i,j) {
	var tmp = a[i];
	a[i] = a[j];
	a[j] = tmp;
};
var haxe_ds_BalancedTree = function() {
};
haxe_ds_BalancedTree.__name__ = true;
haxe_ds_BalancedTree.prototype = {
	set: function(key,value) {
		this.root = this.setLoop(key,value,this.root);
	}
	,get: function(key) {
		var node = this.root;
		while(node != null) {
			var c = this.compare(key,node.key);
			if(c == 0) {
				return node.value;
			}
			if(c < 0) {
				node = node.left;
			} else {
				node = node.right;
			}
		}
		return null;
	}
	,remove: function(key) {
		try {
			this.root = this.removeLoop(key,this.root);
			return true;
		} catch( e ) {
			var e1 = ((e) instanceof js__$Boot_HaxeError) ? e.val : e;
			if(typeof(e1) == "string") {
				var e2 = e1;
				return false;
			} else {
				throw e;
			}
		}
	}
	,exists: function(key) {
		var node = this.root;
		while(node != null) {
			var c = this.compare(key,node.key);
			if(c == 0) {
				return true;
			} else if(c < 0) {
				node = node.left;
			} else {
				node = node.right;
			}
		}
		return false;
	}
	,iterator: function() {
		var ret = [];
		this.iteratorLoop(this.root,ret);
		return HxOverrides.iter(ret);
	}
	,setLoop: function(k,v,node) {
		if(node == null) {
			return new haxe_ds_TreeNode(null,k,v,null);
		}
		var c = this.compare(k,node.key);
		if(c == 0) {
			return new haxe_ds_TreeNode(node.left,k,v,node.right,node == null ? 0 : node._height);
		} else if(c < 0) {
			var nl = this.setLoop(k,v,node.left);
			return this.balance(nl,node.key,node.value,node.right);
		} else {
			var nr = this.setLoop(k,v,node.right);
			return this.balance(node.left,node.key,node.value,nr);
		}
	}
	,removeLoop: function(k,node) {
		if(node == null) {
			throw new js__$Boot_HaxeError("Not_found");
		}
		var c = this.compare(k,node.key);
		if(c == 0) {
			return this.merge(node.left,node.right);
		} else if(c < 0) {
			return this.balance(this.removeLoop(k,node.left),node.key,node.value,node.right);
		} else {
			return this.balance(node.left,node.key,node.value,this.removeLoop(k,node.right));
		}
	}
	,iteratorLoop: function(node,acc) {
		if(node != null) {
			this.iteratorLoop(node.left,acc);
			acc.push(node.value);
			this.iteratorLoop(node.right,acc);
		}
	}
	,merge: function(t1,t2) {
		if(t1 == null) {
			return t2;
		}
		if(t2 == null) {
			return t1;
		}
		var t = this.minBinding(t2);
		return this.balance(t1,t.key,t.value,this.removeMinBinding(t2));
	}
	,minBinding: function(t) {
		if(t == null) {
			throw new js__$Boot_HaxeError("Not_found");
		} else if(t.left == null) {
			return t;
		} else {
			return this.minBinding(t.left);
		}
	}
	,removeMinBinding: function(t) {
		if(t.left == null) {
			return t.right;
		} else {
			return this.balance(this.removeMinBinding(t.left),t.key,t.value,t.right);
		}
	}
	,balance: function(l,k,v,r) {
		var hl = l == null ? 0 : l._height;
		var hr = r == null ? 0 : r._height;
		if(hl > hr + 2) {
			var _this = l.left;
			var _this1 = l.right;
			if((_this == null ? 0 : _this._height) >= (_this1 == null ? 0 : _this1._height)) {
				return new haxe_ds_TreeNode(l.left,l.key,l.value,new haxe_ds_TreeNode(l.right,k,v,r));
			} else {
				return new haxe_ds_TreeNode(new haxe_ds_TreeNode(l.left,l.key,l.value,l.right.left),l.right.key,l.right.value,new haxe_ds_TreeNode(l.right.right,k,v,r));
			}
		} else if(hr > hl + 2) {
			var _this2 = r.right;
			var _this3 = r.left;
			if((_this2 == null ? 0 : _this2._height) > (_this3 == null ? 0 : _this3._height)) {
				return new haxe_ds_TreeNode(new haxe_ds_TreeNode(l,k,v,r.left),r.key,r.value,r.right);
			} else {
				return new haxe_ds_TreeNode(new haxe_ds_TreeNode(l,k,v,r.left.left),r.left.key,r.left.value,new haxe_ds_TreeNode(r.left.right,r.key,r.value,r.right));
			}
		} else {
			return new haxe_ds_TreeNode(l,k,v,r,(hl > hr ? hl : hr) + 1);
		}
	}
	,compare: function(k1,k2) {
		return Reflect.compare(k1,k2);
	}
};
var haxe_ds_TreeNode = function(l,k,v,r,h) {
	if(h == null) {
		h = -1;
	}
	this.left = l;
	this.key = k;
	this.value = v;
	this.right = r;
	if(h == -1) {
		var tmp;
		var _this = this.left;
		var _this1 = this.right;
		if((_this == null ? 0 : _this._height) > (_this1 == null ? 0 : _this1._height)) {
			var _this2 = this.left;
			tmp = _this2 == null ? 0 : _this2._height;
		} else {
			var _this3 = this.right;
			tmp = _this3 == null ? 0 : _this3._height;
		}
		this._height = tmp + 1;
	} else {
		this._height = h;
	}
};
haxe_ds_TreeNode.__name__ = true;
var haxe_ds_BalancedTreeFunctor = function(oComparator) {
	haxe_ds_BalancedTree.call(this);
	this._oComparator = oComparator == null ? new sweet_functor_comparator_ReflectComparator() : oComparator;
};
haxe_ds_BalancedTreeFunctor.__name__ = true;
haxe_ds_BalancedTreeFunctor.__super__ = haxe_ds_BalancedTree;
haxe_ds_BalancedTreeFunctor.prototype = $extend(haxe_ds_BalancedTree.prototype,{
	compare: function(k1,k2) {
		return this._oComparator.apply(k1,k2);
	}
});
var haxe_ds_EnumValueMap = function() {
	haxe_ds_BalancedTree.call(this);
};
haxe_ds_EnumValueMap.__name__ = true;
haxe_ds_EnumValueMap.__super__ = haxe_ds_BalancedTree;
haxe_ds_EnumValueMap.prototype = $extend(haxe_ds_BalancedTree.prototype,{
	compare: function(k1,k2) {
		var d = k1._hx_index - k2._hx_index;
		if(d != 0) {
			return d;
		}
		var p1 = Type.enumParameters(k1);
		var p2 = Type.enumParameters(k2);
		if(p1.length == 0 && p2.length == 0) {
			return 0;
		}
		return this.compareArgs(p1,p2);
	}
	,compareArgs: function(a1,a2) {
		var ld = a1.length - a2.length;
		if(ld != 0) {
			return ld;
		}
		var _g = 0;
		var _g1 = a1.length;
		while(_g < _g1) {
			var i = _g++;
			var d = this.compareArg(a1[i],a2[i]);
			if(d != 0) {
				return d;
			}
		}
		return 0;
	}
	,compareArg: function(v1,v2) {
		if(Reflect.isEnumValue(v1) && Reflect.isEnumValue(v2)) {
			return this.compare(v1,v2);
		} else if(((v1) instanceof Array) && ((v2) instanceof Array)) {
			return this.compareArgs(v1,v2);
		} else {
			return Reflect.compare(v1,v2);
		}
	}
});
var haxe_ds_IntMap = function() {
	this.h = { };
};
haxe_ds_IntMap.__name__ = true;
haxe_ds_IntMap.prototype = {
	set: function(key,value) {
		this.h[key] = value;
	}
	,get: function(key) {
		return this.h[key];
	}
	,exists: function(key) {
		return this.h.hasOwnProperty(key);
	}
	,remove: function(key) {
		if(!this.h.hasOwnProperty(key)) {
			return false;
		}
		delete(this.h[key]);
		return true;
	}
	,keys: function() {
		var a = [];
		for( var key in this.h ) (this.h.hasOwnProperty(key) ? a.push(key | 0) : null);
		return HxOverrides.iter(a);
	}
	,iterator: function() {
		return { ref : this.h, it : this.keys(), hasNext : function() {
			return this.it.hasNext();
		}, next : function() {
			var i = this.it.next();
			return this.ref[i];
		}};
	}
};
var haxe_ds_List = function() {
	this.length = 0;
};
haxe_ds_List.__name__ = true;
haxe_ds_List.prototype = {
	add: function(item) {
		var x = new haxe_ds__$List_ListNode(item,null);
		if(this.h == null) {
			this.h = x;
		} else {
			this.q.next = x;
		}
		this.q = x;
		this.length++;
	}
	,push: function(item) {
		var x = new haxe_ds__$List_ListNode(item,this.h);
		this.h = x;
		if(this.q == null) {
			this.q = x;
		}
		this.length++;
	}
	,first: function() {
		if(this.h == null) {
			return null;
		} else {
			return this.h.item;
		}
	}
	,pop: function() {
		if(this.h == null) {
			return null;
		}
		var x = this.h.item;
		this.h = this.h.next;
		if(this.h == null) {
			this.q = null;
		}
		this.length--;
		return x;
	}
	,isEmpty: function() {
		return this.h == null;
	}
	,remove: function(v) {
		var prev = null;
		var l = this.h;
		while(l != null) {
			if(l.item == v) {
				if(prev == null) {
					this.h = l.next;
				} else {
					prev.next = l.next;
				}
				if(this.q == l) {
					this.q = prev;
				}
				this.length--;
				return true;
			}
			prev = l;
			l = l.next;
		}
		return false;
	}
	,toString: function() {
		var s_b = "";
		var first = true;
		var l = this.h;
		s_b += "{";
		while(l != null) {
			if(first) {
				first = false;
			} else {
				s_b += ", ";
			}
			s_b += Std.string(Std.string(l.item));
			l = l.next;
		}
		s_b += "}";
		return s_b;
	}
};
var haxe_ds__$List_ListNode = function(item,next) {
	this.item = item;
	this.next = next;
};
haxe_ds__$List_ListNode.__name__ = true;
var haxe_ds__$StringMap_StringMapIterator = function(map,keys) {
	this.map = map;
	this.keys = keys;
	this.index = 0;
	this.count = keys.length;
};
haxe_ds__$StringMap_StringMapIterator.__name__ = true;
haxe_ds__$StringMap_StringMapIterator.prototype = {
	hasNext: function() {
		return this.index < this.count;
	}
	,next: function() {
		var _this = this.map;
		var key = this.keys[this.index++];
		if(__map_reserved[key] != null) {
			return _this.getReserved(key);
		} else {
			return _this.h[key];
		}
	}
};
var haxe_ds_StringMap = function() {
	this.h = { };
};
haxe_ds_StringMap.__name__ = true;
haxe_ds_StringMap.prototype = {
	set: function(key,value) {
		if(__map_reserved[key] != null) {
			this.setReserved(key,value);
		} else {
			this.h[key] = value;
		}
	}
	,get: function(key) {
		if(__map_reserved[key] != null) {
			return this.getReserved(key);
		}
		return this.h[key];
	}
	,exists: function(key) {
		if(__map_reserved[key] != null) {
			return this.existsReserved(key);
		}
		return this.h.hasOwnProperty(key);
	}
	,setReserved: function(key,value) {
		if(this.rh == null) {
			this.rh = { };
		}
		this.rh["$" + key] = value;
	}
	,getReserved: function(key) {
		if(this.rh == null) {
			return null;
		} else {
			return this.rh["$" + key];
		}
	}
	,existsReserved: function(key) {
		if(this.rh == null) {
			return false;
		}
		return this.rh.hasOwnProperty("$" + key);
	}
	,remove: function(key) {
		if(__map_reserved[key] != null) {
			key = "$" + key;
			if(this.rh == null || !this.rh.hasOwnProperty(key)) {
				return false;
			}
			delete(this.rh[key]);
			return true;
		} else {
			if(!this.h.hasOwnProperty(key)) {
				return false;
			}
			delete(this.h[key]);
			return true;
		}
	}
	,arrayKeys: function() {
		var out = [];
		for( var key in this.h ) {
		if(this.h.hasOwnProperty(key)) {
			out.push(key);
		}
		}
		if(this.rh != null) {
			for( var key in this.rh ) {
			if(key.charCodeAt(0) == 36) {
				out.push(key.substr(1));
			}
			}
		}
		return out;
	}
	,iterator: function() {
		return new haxe_ds__$StringMap_StringMapIterator(this,this.arrayKeys());
	}
};
var haxe_io_Error = $hxEnums["haxe.io.Error"] = { __ename__ : true, __constructs__ : ["Blocked","Overflow","OutsideBounds","Custom"]
	,Blocked: {_hx_index:0,__enum__:"haxe.io.Error",toString:$estr}
	,Overflow: {_hx_index:1,__enum__:"haxe.io.Error",toString:$estr}
	,OutsideBounds: {_hx_index:2,__enum__:"haxe.io.Error",toString:$estr}
	,Custom: ($_=function(e) { return {_hx_index:3,e:e,__enum__:"haxe.io.Error",toString:$estr}; },$_.__params__ = ["e"],$_)
};
var js__$Boot_HaxeError = function(val) {
	Error.call(this);
	this.val = val;
	if(Error.captureStackTrace) {
		Error.captureStackTrace(this,js__$Boot_HaxeError);
	}
};
js__$Boot_HaxeError.__name__ = true;
js__$Boot_HaxeError.__super__ = Error;
js__$Boot_HaxeError.prototype = $extend(Error.prototype,{
});
var js_Boot = function() { };
js_Boot.__name__ = true;
js_Boot.__string_rec = function(o,s) {
	if(o == null) {
		return "null";
	}
	if(s.length >= 5) {
		return "<...>";
	}
	var t = typeof(o);
	if(t == "function" && (o.__name__ || o.__ename__)) {
		t = "object";
	}
	switch(t) {
	case "function":
		return "<function>";
	case "object":
		if(o.__enum__) {
			var e = $hxEnums[o.__enum__];
			var n = e.__constructs__[o._hx_index];
			var con = e[n];
			if(con.__params__) {
				s = s + "\t";
				return n + "(" + ((function($this) {
					var $r;
					var _g = [];
					{
						var _g1 = 0;
						var _g2 = con.__params__;
						while(true) {
							if(!(_g1 < _g2.length)) {
								break;
							}
							var p = _g2[_g1];
							_g1 = _g1 + 1;
							_g.push(js_Boot.__string_rec(o[p],s));
						}
					}
					$r = _g;
					return $r;
				}(this))).join(",") + ")";
			} else {
				return n;
			}
		}
		if(((o) instanceof Array)) {
			var str = "[";
			s += "\t";
			var _g3 = 0;
			var _g11 = o.length;
			while(_g3 < _g11) {
				var i = _g3++;
				str += (i > 0 ? "," : "") + js_Boot.__string_rec(o[i],s);
			}
			str += "]";
			return str;
		}
		var tostr;
		try {
			tostr = o.toString;
		} catch( e1 ) {
			var e2 = ((e1) instanceof js__$Boot_HaxeError) ? e1.val : e1;
			return "???";
		}
		if(tostr != null && tostr != Object.toString && typeof(tostr) == "function") {
			var s2 = o.toString();
			if(s2 != "[object Object]") {
				return s2;
			}
		}
		var str1 = "{\n";
		s += "\t";
		var hasp = o.hasOwnProperty != null;
		var k = null;
		for( k in o ) {
		if(hasp && !o.hasOwnProperty(k)) {
			continue;
		}
		if(k == "prototype" || k == "__class__" || k == "__super__" || k == "__interfaces__" || k == "__properties__") {
			continue;
		}
		if(str1.length != 2) {
			str1 += ", \n";
		}
		str1 += s + k + " : " + js_Boot.__string_rec(o[k],s);
		}
		s = s.substring(1);
		str1 += "\n" + s + "}";
		return str1;
	case "string":
		return o;
	default:
		return String(o);
	}
};
var pixi_plugins_app_Application = function() {
	this._animationFrameId = null;
	this.pixelRatio = 1;
	this.autoResize = true;
	this.transparent = false;
	this.antialias = false;
	this.forceFXAA = false;
	this.roundPixels = false;
	this.legacy = false;
	this.clearBeforeRender = true;
	this.preserveDrawingBuffer = false;
	this.backgroundColor = 16777215;
	this.width = window.innerWidth;
	this.height = window.innerHeight;
	this.position = "static";
};
pixi_plugins_app_Application.__name__ = true;
pixi_plugins_app_Application.prototype = {
	_setDefaultValues: function() {
		this._animationFrameId = null;
		this.pixelRatio = 1;
		this.autoResize = true;
		this.transparent = false;
		this.antialias = false;
		this.forceFXAA = false;
		this.roundPixels = false;
		this.legacy = false;
		this.clearBeforeRender = true;
		this.preserveDrawingBuffer = false;
		this.backgroundColor = 16777215;
		this.width = window.innerWidth;
		this.height = window.innerHeight;
		this.position = "static";
	}
	,start: function(rendererType,parentDom,canvasElement) {
		if(rendererType == null) {
			rendererType = "auto";
		}
		if(canvasElement == null) {
			this.canvas = window.document.createElement("canvas");
			this.canvas.style.width = this.width + "px";
			this.canvas.style.height = this.height + "px";
			this.canvas.style.position = this.position;
		} else {
			this.canvas = canvasElement;
		}
		if(this.autoResize) {
			window.onresize = $bind(this,this._onWindowResize);
		}
		var renderingOptions = { };
		renderingOptions.width = this.width | 0;
		renderingOptions.height = this.height | 0;
		renderingOptions.view = this.canvas;
		renderingOptions.backgroundColor = this.backgroundColor;
		renderingOptions.resolution = this.pixelRatio;
		renderingOptions.antialias = this.antialias;
		renderingOptions.forceFXAA = this.forceFXAA;
		renderingOptions.autoResize = this.autoResize;
		renderingOptions.transparent = this.transparent;
		renderingOptions.clearBeforeRender = this.clearBeforeRender;
		renderingOptions.preserveDrawingBuffer = this.preserveDrawingBuffer;
		renderingOptions.roundPixels = this.roundPixels;
		renderingOptions.legacy = this.legacy;
		if(rendererType == null) {
			this.app = new PIXI.Application(renderingOptions);
		} else if(rendererType == "canvas") {
			renderingOptions.forceCanvas = true;
			this.app = new PIXI.Application(renderingOptions);
		} else {
			this.app = new PIXI.Application(renderingOptions);
		}
		this.stage = this.app.stage;
		this.renderer = this.app.renderer;
		if(parentDom == null) {
			window.document.body.appendChild(this.app.view);
		} else {
			parentDom.appendChild(this.app.view);
		}
		this.app.ticker.add($bind(this,this._onRequestAnimationFrame));
	}
	,pauseRendering: function() {
		this.app.stop();
	}
	,resumeRendering: function() {
		this.app.start();
	}
	,_onWindowResize: function(event) {
		this.width = window.innerWidth;
		this.height = window.innerHeight;
		this.app.renderer.resize(this.width,this.height);
		this.canvas.style.width = this.width + "px";
		this.canvas.style.height = this.height + "px";
		if(this.onResize != null) {
			this.onResize();
		}
	}
	,_onRequestAnimationFrame: function() {
		if(this.onUpdate != null) {
			this.onUpdate(this.app.ticker.deltaTime);
		}
	}
	,addStats: function() {
		if(window.Perf != null) {
			var rendererType = this.app.renderer.type;
			var renderer;
			switch(rendererType) {
			case 1:
				renderer = "WEBGL";
				break;
			case 2:
				renderer = "CANVAS";
				break;
			default:
				renderer = "UNKNOWN";
			}
			new Perf().addInfo(renderer + " - " + this.pixelRatio);
		}
	}
};
var particle_Main = function() {
	pixi_plugins_app_Application.call(this);
	this.position = "fixed";
	this.width = window.innerWidth;
	this.height = window.innerHeight;
	this.backgroundColor = 0;
	this.antialias = false;
	this.onUpdate = $bind(this,this._animate);
	pixi_plugins_app_Application.prototype.start.call(this,"auto",window.document.getElementById("container-game"),window.document.getElementById("canva-game"));
	this._oModel = new particle_model_Model();
	this._oView = new particle_view_View(this._oModel,this.stage,this.renderer.plugins.interaction);
	new particle_controller_Controller(this._oModel,this._oView);
};
particle_Main.__name__ = true;
particle_Main.main = function() {
	new particle_Main();
};
particle_Main.__super__ = pixi_plugins_app_Application;
particle_Main.prototype = $extend(pixi_plugins_app_Application.prototype,{
	_animate: function(e) {
		this._oView.update();
	}
});
var particle_controller_AController = function(oModel,oView) {
	this._oModel = oModel;
	this._oView = oView;
	this.init();
};
particle_controller_AController.__name__ = true;
particle_controller_AController.prototype = {
	init: function() {
	}
};
var particle_controller_Controller = function(oModel,oView) {
	particle_controller_AController.call(this,oModel,oView);
};
particle_controller_Controller.__name__ = true;
particle_controller_Controller.__super__ = particle_controller_AController;
particle_controller_Controller.prototype = $extend(particle_controller_AController.prototype,{
	init: function() {
		this._oTimer = null;
		new particle_controller_Presenter(this);
		var _g = new haxe_ds_StringMap();
		var value = new particle_controller_process_MapBound(this._oModel,this._oView);
		if(__map_reserved["MapBound"] != null) {
			_g.setReserved("MapBound",value);
		} else {
			_g.h["MapBound"] = value;
		}
		var value1 = new particle_controller_process_Move(this._oModel,this._oView);
		if(__map_reserved["Move"] != null) {
			_g.setReserved("Move",value1);
		} else {
			_g.h["Move"] = value1;
		}
		var value2 = new particle_controller_process_Spawn(this._oModel,this._oView);
		if(__map_reserved["Spawn"] != null) {
			_g.setReserved("Spawn",value2);
		} else {
			_g.h["Spawn"] = value2;
		}
		var value3 = new particle_controller_process_GeneratorSpawnBehavior(this._oModel,this._oView);
		if(__map_reserved["GeneratorSpawnBehavior"] != null) {
			_g.setReserved("GeneratorSpawnBehavior",value3);
		} else {
			_g.h["GeneratorSpawnBehavior"] = value3;
		}
		var value4 = new particle_controller_process_PusherBehavior(this._oModel,this._oView);
		if(__map_reserved["PusherBehavior"] != null) {
			_g.setReserved("PusherBehavior",value4);
		} else {
			_g.h["PusherBehavior"] = value4;
		}
		var value5 = new particle_controller_process_RouterBehavior(this._oModel,this._oView);
		if(__map_reserved["RouterBehavior"] != null) {
			_g.setReserved("RouterBehavior",value5);
		} else {
			_g.h["RouterBehavior"] = value5;
		}
		var value6 = new particle_controller_process_WallGeneratorBehavior(this._oModel,this._oView);
		if(__map_reserved["WallGeneratorBehavior"] != null) {
			_g.setReserved("WallGeneratorBehavior",value6);
		} else {
			_g.h["WallGeneratorBehavior"] = value6;
		}
		var value7 = new particle_controller_process_FabricatorBehavior(this._oModel,this._oView);
		if(__map_reserved["FabricatorBehavior"] != null) {
			_g.setReserved("FabricatorBehavior",value7);
		} else {
			_g.h["FabricatorBehavior"] = value7;
		}
		var value8 = new particle_controller_process_MultiplexerBehavior(this._oModel,this._oView);
		if(__map_reserved["MultiplexerBehavior"] != null) {
			_g.setReserved("MultiplexerBehavior",value8);
		} else {
			_g.h["MultiplexerBehavior"] = value8;
		}
		this._aProcess = _g;
		new particle_controller_Zoom(this._oView);
		new particle_controller_Rotate(this._oModel,this._oView);
		var _this = this._aProcess;
		new particle_controller_DragDrop(this._oModel,this._oView,__map_reserved["Move"] != null ? _this.getReserved("Move") : _this.h["Move"]);
		this._bProcessing = false;
	}
	,getModel: function() {
		return this._oModel;
	}
	,getView: function() {
		return this._oView;
	}
	,processGameStep: function() {
		if(this._bProcessing == true) {
			throw new js__$Boot_HaxeError("overlapping step");
		}
		this._bProcessing = true;
		if(this._oTimer != null) {
			this._oTimer.stop();
			this._oTimer = null;
		}
		var _this = this._aProcess;
		var oProcess = new haxe_ds__$StringMap_StringMapIterator(_this,_this.arrayKeys());
		while(oProcess.hasNext()) {
			var oProcess1 = oProcess.next();
			oProcess1.process();
		}
		if(this._oModel.getSpeed() > 0) {
			this._oTimer = haxe_Timer.delay($bind(this,this.processGameStep),Math.ceil(50 / this._oModel.getSpeed()));
		}
		this._bProcessing = false;
	}
});
var particle_controller_DragDrop = function(oModel,oView,oMove) {
	var _gthis = this;
	this._oMove = oMove;
	particle_controller_AController.call(this,oModel,oView);
	oView.onParticleDragTo.add(function(o) {
		_gthis._oMove.addUserMove(o.particle,o.position);
	});
	oModel.onDelete.add(function(oParticle) {
		if(_gthis._oDragged != null && _gthis._oDragged.getParticle() == oParticle) {
			_gthis._oDragged = null;
		}
	});
};
particle_controller_DragDrop.__name__ = true;
particle_controller_DragDrop.__super__ = particle_controller_AController;
particle_controller_DragDrop.prototype = $extend(particle_controller_AController.prototype,{
});
var particle_controller_Presenter = function(oController) {
	this._oController = oController;
	particle_controller_AController.call(this,this._oController.getModel(),this._oController.getView());
};
particle_controller_Presenter.__name__ = true;
particle_controller_Presenter.__super__ = particle_controller_AController;
particle_controller_Presenter.prototype = $extend(particle_controller_AController.prototype,{
	init: function() {
		var _gthis = this;
		this._oModel.onCreate.add(function(oParticle) {
			_gthis._oView.addParticle(oParticle);
		});
		this._oModel.onDelete.add(function(oParticle1) {
			_gthis._oView.removeParticle(oParticle1);
		});
		this._oModel.onUpdate.add(function(oEvent) {
			_gthis._oView.updateParticle(oEvent.particle);
		});
		this._oModel.onSpeedChange.add(function(oModel) {
			_gthis._oView.getMenu().update();
		});
		this._oView.getMenu().getContainer().addEventListener("click",function(oEvent1) {
			if(!((oEvent1.originalTarget) instanceof HTMLElement)) {
				return;
			}
			var oTarget = oEvent1.originalTarget;
			switch(oTarget.dataset.action) {
			case "step":
				_gthis._oController.processGameStep();
				break;
			case "toggle_play":
				_gthis._oModel.setSpeed(_gthis._oModel.getSpeed() == 0 ? 1 : 0);
				if(_gthis._oModel.getSpeed() != 0) {
					_gthis._oController.processGameStep();
				}
				break;
			}
		});
	}
});
var particle_controller_Rotate = function(oModel,oView) {
	var _gthis = this;
	particle_controller_AController.call(this,oModel,oView);
	window.addEventListener("mousemove",function(event) {
		_gthis.mouse_x = event.clientX;
		_gthis.mouse_y = event.clientY;
	});
	window.addEventListener("keydown",function(event1) {
		if(event1.keyCode != 82) {
			return;
		}
		var oPosition = _gthis._oView.toGridPosition(_gthis.mouse_x,_gthis.mouse_y);
		var oParticle = _gthis._oModel.getParticleByPosition(oPosition);
		console.log("src/particle/controller/Rotate.hx:36:",oPosition);
		if(oParticle == null) {
			return;
		}
		var tmp = oParticle.getDirection();
		oParticle.setDirection(_gthis.getNextDirection(tmp));
		_gthis._oView.updateParticle(oParticle);
	});
};
particle_controller_Rotate.__name__ = true;
particle_controller_Rotate.__super__ = particle_controller_AController;
particle_controller_Rotate.prototype = $extend(particle_controller_AController.prototype,{
	getNextDirection: function(oDirection) {
		switch(oDirection) {
		case 0:
			return 3;
		case 1:
			return 2;
		case 2:
			return 0;
		case 3:
			return 1;
		}
	}
});
var particle_controller_Zoom = function(oView) {
	var _gthis = this;
	this._oView = oView;
	window.addEventListener("wheel",function(event) {
		var fFactor = _gthis._oView.getZoom() * (event.deltaY > 0 ? 0.75 : 1.25);
		fFactor = Math.min(fFactor,100);
		fFactor = Math.max(fFactor,0.01);
		var x = event.pageX;
		var y = event.pageY;
		var oScene = _gthis._oView.getScene();
		var worldPos_x = (x - oScene.x) / oScene.scale.x;
		var worldPos_y = (y - oScene.y) / oScene.scale.y;
		var newScale = fFactor;
		var newScreenPos_x = worldPos_x * fFactor + oScene.x;
		var newScreenPos_y = worldPos_y * fFactor + oScene.y;
		oScene.x -= newScreenPos_x - x;
		oScene.y -= newScreenPos_y - y;
		oScene.scale.x = fFactor;
		oScene.scale.y = fFactor;
	});
};
particle_controller_Zoom.__name__ = true;
var particle_controller_process_ATargeterBehavior = function(oModel,oView) {
	particle_controller_AController.call(this,oModel,oView);
};
particle_controller_process_ATargeterBehavior.__name__ = true;
particle_controller_process_ATargeterBehavior.__super__ = particle_controller_AController;
particle_controller_process_ATargeterBehavior.prototype = $extend(particle_controller_AController.prototype,{
	process: function() {
		var a = this._oModel.getParticleByType(this.getType());
		var oParticle = a.iterator();
		while(oParticle.hasNext()) {
			var oParticle1 = oParticle.next();
			if(oParticle1.getEnergy() == 0) {
				continue;
			}
			var oDirectionVector = particle_model_DirectionTool.getVector(oParticle1.getDirection());
			var oPushPosition = oParticle1.getPosition().clone().vector_add(oDirectionVector);
			var oTarget = this._oModel.getParticleByPosition(oPushPosition);
			if(!this.targetProcess(oTarget,oDirectionVector)) {
				continue;
			}
			this._oModel.addParticleEnergy(oParticle1,-1);
		}
	}
	,getType: function() {
		throw new js__$Boot_HaxeError("override me");
	}
	,targetProcess: function(oTarget,oDirectionVector) {
		throw new js__$Boot_HaxeError("override me");
	}
});
var particle_controller_process_FabricatorBehavior = function(oModel,oView) {
	particle_controller_process_ATargeterBehavior.call(this,oModel,oView);
};
particle_controller_process_FabricatorBehavior.__name__ = true;
particle_controller_process_FabricatorBehavior.__super__ = particle_controller_process_ATargeterBehavior;
particle_controller_process_FabricatorBehavior.prototype = $extend(particle_controller_process_ATargeterBehavior.prototype,{
	targetProcess: function(oTarget,oDirectionVector) {
		if(oTarget == null) {
			return false;
		}
		this._oModel.setParticleType(oTarget,this.getNextType(oTarget.getType()));
		return true;
	}
	,getType: function() {
		return "fabricator";
	}
	,getNextType: function(oType) {
		switch(oType) {
		case "multiplexer":
			return "pusher";
		case "pusher":
			return "wall_generator";
		case "redirect":
			return "multiplexer";
		case "wall":
			return "redirect";
		case "wall_generator":
			return "fabricator";
		default:
			return oType;
		}
	}
});
var particle_controller_process_GeneratorSpawnBehavior = function(oModel,oView) {
	particle_controller_AController.call(this,oModel,oView);
};
particle_controller_process_GeneratorSpawnBehavior.__name__ = true;
particle_controller_process_GeneratorSpawnBehavior.__super__ = particle_controller_AController;
particle_controller_process_GeneratorSpawnBehavior.prototype = $extend(particle_controller_AController.prototype,{
	process: function() {
		var a = this._oModel.getParticleByType("generator");
		var oParticle = a.iterator();
		while(oParticle.hasNext()) {
			var oParticle1 = oParticle.next();
			var _g = 0;
			var _g1 = particle_model_DirectionTool.getAll();
			while(_g < _g1.length) {
				var oDirection = _g1[_g];
				++_g;
				var oVectorDirection = particle_model_DirectionTool.getVector(oDirection);
				var oSpawnPosition = oParticle1.getPosition().clone().vector_add(oVectorDirection);
				if(this._oModel.getParticleByPosition(oSpawnPosition) != null) {
					continue;
				}
				this._oModel.addParticle(this.createParticle(oParticle1,oSpawnPosition,oDirection));
			}
		}
	}
	,createParticle: function(oParent,oPosition,oDirection) {
		var oParticle = new particle_model_Particle(oPosition,particle_model_DirectionTool.getVector(oDirection),"energy_echo");
		return oParticle;
	}
});
var particle_controller_process_MapBound = function(oModel,oView) {
	this._oModel = oModel;
	this._oView = oView;
};
particle_controller_process_MapBound.__name__ = true;
particle_controller_process_MapBound.prototype = {
	process: function() {
		var x_min = 0;
		var xmax;
		var oParticle = this._oModel.getParticleAll().iterator();
		while(oParticle.hasNext()) {
			var oParticle1 = oParticle.next();
			if(!this.isBetween(oParticle1.getPosition().x,0,this._oModel.getGrid().getWidth()) || !this.isBetween(oParticle1.getPosition().y,0,this._oModel.getGrid().getHeight())) {
				this._oModel.removeParticle(oParticle1);
			}
		}
	}
	,isBetween: function(x,min,max) {
		if(x >= min) {
			return x <= max;
		} else {
			return false;
		}
	}
};
var particle_controller_process_Move = function(oModel,oView) {
	this._lUserMove = new haxe_ds_List();
	this._oModel = oModel;
	this._oView = oView;
	this._iMaxSpeed = 1;
	this._iCurrentSpeed = 1;
	this._oCollisionHandler = new particle_controller_tool_CollisionHandler(this._oModel);
};
particle_controller_process_Move.__name__ = true;
particle_controller_process_Move.prototype = {
	addUserMove: function(oParticle,oPos) {
		this._lUserMove.add({ particle : oParticle, vector : oPos});
	}
	,process: function() {
		var oPair;
		while(true) {
			oPair = this._lUserMove.pop();
			if(!(oPair != null)) {
				break;
			}
			var oParticle = oPair.particle;
			if(this._oModel.getParticle(oParticle.getId()) == null) {
				return;
			}
			if(this.collisionCheck(oParticle,oPair.vector)) {
				return;
			}
			this._oModel.setParticlePosition(oParticle,oPair.vector);
		}
		var _g = 0;
		var _g1 = particle_model_DirectionTool.getAll();
		while(_g < _g1.length) {
			var oDirection = _g1[_g];
			++_g;
			var a = Lambda.array(this._oModel.getParticleListByVelDir(oDirection));
			haxe_ds_ArraySort.sort(a,this.sortingFunc(oDirection));
			var _g2 = 0;
			while(_g2 < a.length) {
				var oParticle1 = a[_g2];
				++_g2;
				this.move(oDirection,oParticle1);
			}
		}
		this._iCurrentSpeed++;
		if(this._iCurrentSpeed > this._iMaxSpeed) {
			this._iCurrentSpeed = 1;
		}
	}
	,move: function(oDirection,oParticle) {
		if(this._oModel.getParticle(oParticle.getId()) == null) {
			return;
		}
		var oPosition = oParticle.getPosition().clone();
		switch(oDirection) {
		case 0:
			if(oParticle.getVelocity().y < this._iCurrentSpeed) {
				return;
			}
			oPosition.y++;
			break;
		case 1:
			if(-oParticle.getVelocity().y < this._iCurrentSpeed) {
				return;
			}
			oPosition.y--;
			break;
		case 2:
			if(-oParticle.getVelocity().x < this._iCurrentSpeed) {
				return;
			}
			oPosition.x--;
			break;
		case 3:
			if(oParticle.getVelocity().x < this._iCurrentSpeed) {
				return;
			}
			oPosition.x++;
			break;
		}
		if(this.collisionCheck(oParticle,oPosition)) {
			return;
		}
		this._oModel.setParticlePosition(oParticle,oPosition);
	}
	,collisionCheck: function(oParticle,oPosition) {
		var o = this._oModel.getParticleByPosition(oPosition);
		if(o == null) {
			return false;
		}
		this._oCollisionHandler.handle(oParticle,o);
		if(this._oModel.getParticleByPosition(oPosition) != null && this._oModel.getParticle(oParticle.getId()) != null) {
			if(oParticle.getType() == "energy_echo") {
				throw new js__$Boot_HaxeError("!!!!");
			}
			this._oModel.setParticleVelocity(oParticle,new space_Vector2i());
		}
		if(this._oModel.getParticleByPosition(oPosition) != null || this._oModel.getParticle(oParticle.getId()) == null) {
			return true;
		}
		return false;
	}
	,sortingFunc: function(oDirection) {
		switch(oDirection) {
		case 0:
			return function(a,b) {
				return b.getPosition().y - a.getPosition().y;
			};
		case 1:
			return function(a1,b1) {
				return a1.getPosition().y - b1.getPosition().y;
			};
		case 2:
			return function(a2,b2) {
				return a2.getPosition().x - b2.getPosition().x;
			};
		case 3:
			return function(a3,b3) {
				return b3.getPosition().x - a3.getPosition().x;
			};
		}
	}
};
var particle_controller_process_MultiplexerBehavior = function(oModel,oView) {
	particle_controller_AController.call(this,oModel,oView);
};
particle_controller_process_MultiplexerBehavior.__name__ = true;
particle_controller_process_MultiplexerBehavior.__super__ = particle_controller_AController;
particle_controller_process_MultiplexerBehavior.prototype = $extend(particle_controller_AController.prototype,{
	process: function() {
		var a = this._oModel.getParticleByType("multiplexer");
		var oParticle = a.iterator();
		while(oParticle.hasNext()) {
			var oParticle1 = oParticle.next();
			if(oParticle1.getEnergy() == 0) {
				continue;
			}
			var oDirectionVector = particle_model_DirectionTool.getVector(oParticle1.getDirection());
			var oTargetPosition = oParticle1.getPosition().clone().vector_add(oDirectionVector);
			var oTarget = this._oModel.getParticleByPosition(oTargetPosition);
			if(oTarget != null) {
				this._oModel.addParticleEnergy(oTarget);
				continue;
			}
			this._oModel.addParticle(new particle_model_Particle(oTargetPosition,oDirectionVector,"energy_echo"));
			this._oModel.addParticleEnergy(oParticle1,-1);
			oParticle1.setDirection(particle_model_DirectionTool.getReverse(oParticle1.getDirection()));
		}
	}
});
var particle_controller_process_PusherBehavior = function(oModel,oView) {
	particle_controller_process_ATargeterBehavior.call(this,oModel,oView);
};
particle_controller_process_PusherBehavior.__name__ = true;
particle_controller_process_PusherBehavior.__super__ = particle_controller_process_ATargeterBehavior;
particle_controller_process_PusherBehavior.prototype = $extend(particle_controller_process_ATargeterBehavior.prototype,{
	targetProcess: function(oTarget,oDirectionVector) {
		if(oTarget == null) {
			return false;
		}
		this._oModel.setParticleVelocity(oTarget,oTarget.getVelocity().vector_add(oDirectionVector));
		return true;
	}
	,getType: function() {
		return "pusher";
	}
});
var particle_controller_process_RouterBehavior = function(oModel,oView) {
	particle_controller_AController.call(this,oModel,oView);
};
particle_controller_process_RouterBehavior.__name__ = true;
particle_controller_process_RouterBehavior.__super__ = particle_controller_AController;
particle_controller_process_RouterBehavior.prototype = $extend(particle_controller_AController.prototype,{
	process: function() {
		var a = this._oModel.getParticleByType("redirect");
		var oParticle = a.iterator();
		while(oParticle.hasNext()) {
			var oParticle1 = oParticle.next();
			if(oParticle1.getEnergy() == 0) {
				continue;
			}
			var oDirectionVector = particle_model_DirectionTool.getVector(oParticle1.getDirection());
			var oTargetPosition = oParticle1.getPosition().clone().vector_add(oDirectionVector);
			var oTarget = this._oModel.getParticleByPosition(oTargetPosition);
			if(oTarget != null) {
				this._oModel.addParticleEnergy(oTarget);
				continue;
			}
			this._oModel.addParticle(new particle_model_Particle(oTargetPosition,oDirectionVector,"energy_echo"));
			this._oModel.addParticleEnergy(oParticle1,-1);
		}
	}
});
var particle_controller_process_SpaceRelativity = function(oModel,oView) {
	this._oModel = oModel;
	this._oView = oView;
};
particle_controller_process_SpaceRelativity.__name__ = true;
particle_controller_process_SpaceRelativity.prototype = {
	process: function() {
		var aPair = [];
		var oParticleA = this._oModel.getParticleAll().iterator();
		while(oParticleA.hasNext()) {
			var oParticleA1 = oParticleA.next();
			var oParticleB = this._oModel.getParticleAll().iterator();
			while(oParticleB.hasNext()) {
				var oParticleB1 = oParticleB.next();
				if(oParticleA1.getId() >= oParticleB1.getId()) {
					continue;
				}
				aPair.push([oParticleA1,oParticleB1]);
			}
		}
		var _g = 0;
		while(_g < aPair.length) {
			var oPair = aPair[_g];
			++_g;
			var oDelta = new space_Vector2i(oPair[0].getPosition().x - oPair[1].getPosition().x,oPair[0].getPosition().y - oPair[1].getPosition().y);
			var iDist = oDelta.getTaxicabLength();
			if(iDist == 0) {
				throw new js__$Boot_HaxeError("!!");
			}
			oDelta.mult(0.5 / (iDist / 2));
			this._oModel.setParticleVelocity(oPair[1],this.maxSpeed(oDelta.clone().vector_add(oPair[1].getVelocity())));
			this._oModel.setParticleVelocity(oPair[0],this.maxSpeed(oDelta.clone().mult(-1).vector_add(oPair[0].getVelocity())));
		}
	}
	,maxSpeed: function(oVector) {
		oVector.x = this.clampBetween(oVector.x,-10,10);
		oVector.y = this.clampBetween(oVector.y,-10,10);
		return oVector;
	}
	,clampBetween: function(i,min,max) {
		if(i < min) {
			return min;
		}
		if(i > max) {
			return max;
		}
		return i;
	}
};
var particle_controller_process_Spawn = function(oModel,oView) {
	this._oModel = oModel;
	this._oView = oView;
	this._iMax = 200;
	this._iStep = 1;
	this._oModel.addParticle(new particle_model_Particle(new space_Vector2i(25,25),new space_Vector2i(),"generator"));
	this._oModel.addParticle(new particle_model_Particle(new space_Vector2i(31,30),new space_Vector2i(),"wall_generator"));
	this._oModel.addParticle(new particle_model_Particle(new space_Vector2i(30,30),new space_Vector2i(),"fabricator"));
};
particle_controller_process_Spawn.__name__ = true;
particle_controller_process_Spawn.prototype = {
	process: function() {
		return;
	}
	,createParticle: function() {
		var oGrid = this._oModel.getGrid();
		var iDeadZone = Math.floor(oGrid.getWidth() * 0.25);
		var oDirection = [3,0,2,1][Math.floor(Math.random() * 4)];
		var oPos = null;
		var oVel = null;
		switch(oDirection) {
		case 0:
			oPos = new space_Vector2i(this.randomBetween(iDeadZone,oGrid.getWidth() - iDeadZone),oGrid.getHeight());
			oVel = new space_Vector2i(this.randomBetween(-1,1),-1);
			break;
		case 1:
			oPos = new space_Vector2i(this.randomBetween(iDeadZone,oGrid.getWidth() - iDeadZone),0);
			oVel = new space_Vector2i(this.randomBetween(-1,1),1);
			break;
		case 2:
			oPos = new space_Vector2i(0,this.randomBetween(iDeadZone,oGrid.getHeight() - iDeadZone));
			oVel = new space_Vector2i(1,this.randomBetween(-1,1));
			break;
		case 3:
			oPos = new space_Vector2i(oGrid.getWidth(),this.randomBetween(iDeadZone,oGrid.getHeight() - iDeadZone));
			oVel = new space_Vector2i(-1,this.randomBetween(-1,1));
			break;
		}
		return new particle_model_Particle(oPos,oVel);
	}
	,randomBetween: function(min,max) {
		return Math.floor(Math.random() * (max + 1)) + min;
	}
};
var particle_controller_process_WallGeneratorBehavior = function(oModel,oView) {
	particle_controller_AController.call(this,oModel,oView);
};
particle_controller_process_WallGeneratorBehavior.__name__ = true;
particle_controller_process_WallGeneratorBehavior.__super__ = particle_controller_AController;
particle_controller_process_WallGeneratorBehavior.prototype = $extend(particle_controller_AController.prototype,{
	process: function() {
		var a = this._oModel.getParticleByType("wall_generator");
		var oParticle = a.iterator();
		while(oParticle.hasNext()) {
			var oParticle1 = oParticle.next();
			if(oParticle1.getEnergy() == 0) {
				continue;
			}
			var oDirectionVector = particle_model_DirectionTool.getVector(oParticle1.getDirection());
			var oTargetPosition = oParticle1.getPosition().clone().vector_add(oDirectionVector);
			var oTarget = this._oModel.getParticleByPosition(oTargetPosition);
			if(oTarget != null) {
				continue;
			}
			this._oModel.addParticle(new particle_model_Particle(oTargetPosition,new space_Vector2i(),"wall"));
			this._oModel.addParticleEnergy(oParticle1,-1);
		}
	}
});
var particle_controller_tool_CollisionHandler = function(oModel) {
	this._bReverse = false;
	this._oModel = oModel;
};
particle_controller_tool_CollisionHandler.__name__ = true;
particle_controller_tool_CollisionHandler.prototype = {
	handle: function(oParticleA,oParticleB) {
		if(oParticleA.getType() == "energy_echo") {
			this._oModel.removeParticle(oParticleA);
			this._oModel.addParticleEnergy(oParticleB);
		}
		if(this._bReverse == false) {
			this._bReverse = true;
			this.handle(oParticleB,oParticleA);
			this._bReverse = false;
		}
	}
};
var space_Vector2i = function(x_,y_) {
	if(y_ == null) {
		y_ = 0;
	}
	if(x_ == null) {
		x_ = 0;
	}
	this.set(x_,y_);
};
space_Vector2i.__name__ = true;
space_Vector2i.compare = function(a,oVector) {
	console.log("src/space/Vector2i.hx:115:","ok");
	if(a.equal(oVector)) {
		return 0;
	}
	if(a.toString() > oVector.toString()) {
		return 1;
	} else {
		return -1;
	}
};
space_Vector2i.distance = function(v1,v2) {
	var dx = v1.x - v2.x;
	var dy = v1.y - v2.y;
	return Math.sqrt(dx * dx + dy * dy);
};
space_Vector2i.distanceSqed = function(v1,v2) {
	var dx = v1.x - v2.x;
	var dy = v1.y - v2.y;
	return dx * dx + dy * dy;
};
space_Vector2i.distanceOcto = function(v1,v2) {
	var dx = Math.abs(v1.x - v2.x);
	var dy = Math.abs(v1.y - v2.y);
	return (dx + dy + Math.max(dx,dy)) * 0.5;
};
space_Vector2i.prototype = {
	clone: function() {
		return new space_Vector2i(this.x,this.y);
	}
	,copy: function(oVector) {
		return this.set(oVector.x,oVector.y);
	}
	,length_get: function() {
		return Math.sqrt(this.x * this.x + this.y * this.y);
	}
	,dotProduct: function(v) {
		return this.x * v.x + this.y * v.y;
	}
	,distance_get: function(oVector) {
		return space_Vector2i.distance(this,oVector);
	}
	,distanceSqed_get: function(oVector) {
		return space_Vector2i.distanceSqed(this,oVector);
	}
	,getTaxicabLength: function() {
		return Math.abs(this.x) + Math.abs(this.y);
	}
	,toString: function() {
		return this.x + ":" + this.y;
	}
	,set: function(x_,y_) {
		if(y_ == null) {
			y_ = 0;
		}
		this.x = x_;
		this.y = y_;
		return this;
	}
	,add: function(x_,y_) {
		if(y_ == null) {
			y_ = 0;
		}
		this.x += x_;
		this.y += y_;
		return this;
	}
	,vector_add: function(oVector) {
		return this.add(oVector.x,oVector.y);
	}
	,mult: function(fMultiplicator) {
		this.x = Math.round(this.x * fMultiplicator);
		this.y = Math.round(this.y * fMultiplicator);
		return this;
	}
	,divide: function(fDivisor) {
		if(fDivisor == 0) {
			throw new js__$Boot_HaxeError("[ERROR] Vector3 : can not divide by 0.");
		}
		return this.mult(Math.round(1 / fDivisor));
	}
	,normalize: function() {
		this.divide(this.length_get());
		return this;
	}
	,length_set: function(fLength) {
		if(fLength < 0) {
			throw new js__$Boot_HaxeError("Invalid length : " + fLength);
		}
		var length = this.length_get();
		if(length == 0) {
			this.x = Math.round(fLength);
		} else {
			this.mult(fLength / length);
		}
		return this;
	}
	,project: function(oVector) {
		var fDotprod = oVector.dotProduct(this);
		this.copy(oVector).length_set(Math.abs(fDotprod) / oVector.length_get());
		return this;
	}
	,equal: function(oVector) {
		if(oVector.x == this.x) {
			return oVector.y == this.y;
		} else {
			return false;
		}
	}
	,angleAxisXY: function() {
		if(this.x == 0 && this.y == 0) {
			return null;
		}
		return Math.atan2(this.y,this.x);
	}
};
var particle_model_DirectionTool = function() { };
particle_model_DirectionTool.__name__ = true;
particle_model_DirectionTool.getAll = function() {
	return particle_model_DirectionTool.all;
};
particle_model_DirectionTool.getByVelocity = function(oVector) {
	var a = [];
	if(oVector.x > 0) {
		a.push(3);
	}
	if(oVector.x < 0) {
		a.push(2);
	}
	if(oVector.y > 0) {
		a.push(0);
	}
	if(oVector.y < 0) {
		a.push(1);
	}
	return a;
};
particle_model_DirectionTool.getReverse = function(oDirection) {
	switch(oDirection) {
	case 0:
		return 1;
	case 1:
		return 0;
	case 2:
		return 3;
	case 3:
		return 2;
	}
};
particle_model_DirectionTool.toRadian = function(oDirection) {
	switch(oDirection) {
	case 0:
		return 1.5708;
	case 1:
		return -1.5708;
	case 2:
		return 3.14159;
	case 3:
		return 0;
	}
};
particle_model_DirectionTool.getVector = function(oDirection) {
	return particle_model_DirectionTool.vector.get(oDirection);
};
var particle_model_Grid = function(iWidth,iHeight) {
	this._iHeight = iHeight;
	this._iWidth = iWidth;
};
particle_model_Grid.__name__ = true;
particle_model_Grid.prototype = {
	getWidth: function() {
		return this._iWidth;
	}
	,getHeight: function() {
		return this._iHeight;
	}
};
var particle_model_Model = function() {
	this._iSpeed = 0;
	this.onCreate = new trigger_EventListener();
	this.onDelete = new trigger_EventListener();
	this.onUpdate = new trigger_EventListener();
	this.onSpeedChange = new trigger_EventListener();
	this._oGrid = new particle_model_Grid(100,50);
	this._oIdGen = new particle_tool_UniqueIdGenerator();
	this.test = new haxe_ds_BalancedTreeFunctor();
	this._mParticle = new haxe_ds_BalancedTreeFunctor();
	this._mParticleListByVelDir = new haxe_ds_IntMap();
	this._mParticleListByVelDir.set(0,new haxe_ds_IntMap());
	this._mParticleListByVelDir.set(1,new haxe_ds_IntMap());
	this._mParticleListByVelDir.set(2,new haxe_ds_IntMap());
	this._mParticleListByVelDir.set(3,new haxe_ds_IntMap());
	this._mParticleByPosition = new haxe_ds_BalancedTreeFunctor(new particle_model_Vector2iComp());
	this._mParticleByType = new haxe_ds_BalancedTree();
};
particle_model_Model.__name__ = true;
particle_model_Model.prototype = {
	getGrid: function() {
		return this._oGrid;
	}
	,getParticle: function(iId) {
		return this._mParticle.get(iId);
	}
	,getParticleAll: function() {
		return this._mParticle;
	}
	,getParticleCount: function() {
		return Lambda.array(this._mParticle).length;
	}
	,getParticleByPosition: function(oVector) {
		return this._mParticleByPosition.get(oVector);
	}
	,getParticleListByVelDir: function(oDir) {
		return this._mParticleListByVelDir.get(oDir);
	}
	,getParticleByType: function(oType) {
		if(!this._mParticleByType.exists(oType)) {
			this._mParticleByType.set(oType,new haxe_ds_BalancedTree());
		}
		return this._mParticleByType.get(oType);
	}
	,getCount: function() {
		return Lambda.count(this._mParticle);
	}
	,getSpeed: function() {
		return this._iSpeed;
	}
	,setSpeed: function(i) {
		this._iSpeed = i;
		this.onSpeedChange.trigger(this);
	}
	,addParticle: function(oParticle) {
		oParticle.setId(this._oIdGen.generate());
		this._mParticle.set(oParticle.getId(),oParticle);
		var _g = 0;
		var _g1 = particle_model_DirectionTool.getByVelocity(oParticle.getVelocity());
		while(_g < _g1.length) {
			var oDirection = _g1[_g];
			++_g;
			this._mParticleListByVelDir.get(oDirection).set(oParticle.getId(),oParticle);
		}
		this._mParticleByPosition.set(oParticle.getPosition(),oParticle);
		if(!this._mParticleByType.exists(oParticle.getType())) {
			this._mParticleByType.set(oParticle.getType(),new haxe_ds_BalancedTree());
		}
		this._mParticleByType.get(oParticle.getType()).set(oParticle.getId(),oParticle);
		this.onCreate.trigger(oParticle);
	}
	,removeParticle: function(oParticle) {
		if(oParticle.getId() == null) {
			console.log("src/particle/model/Model.hx:153:","Warning: trying to remove particle with no identity");
			return;
		}
		console.log("src/particle/model/Model.hx:161:","removing #" + oParticle.getId());
		console.log("src/particle/model/Model.hx:162:",haxe_CallStack.callStack());
		this._mParticle.remove(oParticle.getId());
		var _g = 0;
		var _g1 = particle_model_DirectionTool.getAll();
		while(_g < _g1.length) {
			var oDirection = _g1[_g];
			++_g;
			this._mParticleListByVelDir.get(oDirection).remove(oParticle.getId());
		}
		this._mParticleByPosition.remove(oParticle.getPosition());
		this._mParticleByType.get(oParticle.getType()).remove(oParticle.getId());
		this.onDelete.trigger(oParticle);
	}
	,setParticleVelocity: function(oParticle,oVector) {
		var _g = 0;
		var _g1 = particle_model_DirectionTool.getAll();
		while(_g < _g1.length) {
			var oDirection = _g1[_g];
			++_g;
			this._mParticleListByVelDir.get(oDirection).remove(oParticle.getId());
		}
		oParticle.setVelocity(oVector);
		var _g2 = 0;
		var _g3 = particle_model_DirectionTool.getByVelocity(oParticle.getVelocity());
		while(_g2 < _g3.length) {
			var oDirection1 = _g3[_g2];
			++_g2;
			this._mParticleListByVelDir.get(oDirection1).set(oParticle.getId(),oParticle);
		}
	}
	,setParticlePosition: function(oParticle,oVector) {
		this._mParticleByPosition.remove(oParticle.getPosition());
		oParticle.setPosition(oVector);
		this._mParticleByPosition.set(oParticle.getPosition(),oParticle);
		this.onUpdate.trigger({ particle : oParticle, field : "position"});
	}
	,setParticleType: function(oParticle,oType) {
		if(oParticle.getType() == oType) {
			return;
		}
		this._mParticleByType.get(oParticle.getType()).remove(oParticle.getId());
		oParticle.setType(oType);
		if(!this._mParticleByType.exists(oParticle.getType())) {
			this._mParticleByType.set(oParticle.getType(),new haxe_ds_BalancedTree());
		}
		this._mParticleByType.get(oParticle.getType()).set(oParticle.getId(),oParticle);
		this.onUpdate.trigger({ particle : oParticle, field : "type"});
	}
	,addParticleEnergy: function(oParticle,i) {
		if(i == null) {
			i = 1;
		}
		if(!this._mParticle.exists(oParticle.getId())) {
			return;
		}
		oParticle.addEnergy(i);
		this.onUpdate.trigger({ particle : oParticle, field : "energy"});
	}
};
var particle_model_Vector2iComp = function() {
};
particle_model_Vector2iComp.__name__ = true;
particle_model_Vector2iComp.prototype = {
	apply: function(a,b) {
		if(a.equal(b)) {
			return 0;
		}
		if(a.toString() > b.toString()) {
			return 1;
		} else {
			return -1;
		}
	}
};
var particle_model_Particle = function(oPosition,oVelocity,iType,iCharge,oDirection) {
	if(oDirection == null) {
		oDirection = 0;
	}
	if(iCharge == null) {
		iCharge = 0;
	}
	if(iType == null) {
		iType = "wall";
	}
	this._iId = null;
	this._iType = iType;
	this._oVelocity = oVelocity;
	this._oPosition = oPosition;
	this._iEnergy = 0;
	this._oDirection = oDirection;
};
particle_model_Particle.__name__ = true;
particle_model_Particle.prototype = {
	getId: function() {
		return this._iId;
	}
	,getVelocity: function() {
		return this._oVelocity;
	}
	,getPosition: function() {
		return this._oPosition;
	}
	,getType: function() {
		return this._iType;
	}
	,getEnergy: function() {
		return this._iEnergy;
	}
	,getDirection: function() {
		return this._oDirection;
	}
	,setId: function(iId) {
		this._iId = iId;
	}
	,setPosition: function(oPosition) {
		this._oPosition = oPosition;
		return this;
	}
	,setVelocity: function(oVector) {
		this._oVelocity = oVector;
		return this;
	}
	,setType: function(iType) {
		this._iType = iType;
	}
	,addEnergy: function(i) {
		this._iEnergy = 1;
		if(i < 0) {
			this._iEnergy = 0;
		}
	}
	,setDirection: function(oDirection) {
		this._oDirection = oDirection;
	}
};
var particle_tool_UniqueIdGenerator = function(_iIdOffset) {
	if(_iIdOffset == null) {
		_iIdOffset = 0;
	}
	this._iId = _iIdOffset;
};
particle_tool_UniqueIdGenerator.__name__ = true;
particle_tool_UniqueIdGenerator.prototype = {
	setOffset: function(_iIdOffset) {
		this._iId = _iIdOffset;
	}
	,generate: function() {
		return this._iId++;
	}
};
var particle_view_GridView = function(iWidth,iHeight) {
	this._oContainer = new PIXI.Container();
	var o = new PIXI.Graphics().lineStyle(0.1,3355443,1);
	var _g = 0;
	var _g1 = iWidth;
	while(_g < _g1) {
		var j = _g++;
		o.moveTo(j,0).lineTo(j,iHeight);
	}
	var _g2 = 0;
	var _g3 = iHeight;
	while(_g2 < _g3) {
		var i = _g2++;
		o.moveTo(0,i).lineTo(iWidth,i);
	}
	this._oContainer.addChild(o);
};
particle_view_GridView.__name__ = true;
particle_view_GridView.prototype = {
	getContainer: function() {
		return this._oContainer;
	}
};
var particle_view_Menu = function(oModel,oContainer) {
	this._oModel = oModel;
	this._oContainer = oContainer;
	if(oContainer == null) {
		throw new js__$Boot_HaxeError("!!");
	}
	this._oTemplate = new haxe_Template(haxe_Resource.getString("menu"));
};
particle_view_Menu.__name__ = true;
particle_view_Menu.prototype = {
	getContainer: function() {
		return this._oContainer;
	}
	,getData: function() {
		return { speed : this._oModel.getSpeed()};
	}
	,update: function() {
		var tmp = this._oTemplate;
		var tmp1 = this.getData();
		this._oContainer.innerHTML = tmp.execute(tmp1);
	}
};
var particle_view_ParticleView = function(oParticle) {
	this._oParticle = oParticle;
	this._oContainer = new PIXI.Container();
	this._oContainer.interactive = true;
	this._oContainer.interactiveChildren = true;
	this._oBody = new PIXI.Graphics();
	this.updateBody();
	this._oContainer.addChild(this._oBody);
	this._oVelocity = new PIXI.Graphics();
	this._oVelocity.lineStyle(2,16777215,1);
	this._oVelocity.beginFill(3525722,1);
	this._oVelocity.moveTo(0,0);
	this._oVelocity.lineTo(this._oParticle.getVelocity().x,this._oParticle.getVelocity().y);
	this._oVelocity.endFill();
	this._oContainer.addChild(this._oVelocity);
};
particle_view_ParticleView.__name__ = true;
particle_view_ParticleView.prototype = {
	getContainer: function() {
		return this._oContainer;
	}
	,getParticle: function() {
		return this._oParticle;
	}
	,getTypeColor: function(oType) {
		if(particle_view_ParticleView.TYPE_COLOR.exists(oType)) {
			return particle_view_ParticleView.TYPE_COLOR.get(oType);
		} else {
			return 6710886;
		}
	}
	,updateBody: function() {
		this._oBody.clear();
		this._oBody.buttonMode = true;
		this._oBody.interactive = true;
		this._oBody.lineStyle(0.2,this._oParticle.getEnergy() == 1 ? 16777215 : 5592405,1);
		this._oBody.beginFill(this.getTypeColor(this._oParticle.getType()),1);
		this._oBody.drawRect(-0.4,-0.4,0.8,0.8);
		this._oBody.endFill();
		if(this._oParticle.getType() == "multiplexer") {
			this._oBody.lineStyle(0.1,6710886,1).moveTo(0,0.25).lineTo(-0.5,0).lineTo(0,-0.25);
		}
		if(["pusher","fabricator","wall_generator","redirect","multiplexer"].indexOf(this._oParticle.getType()) != -1) {
			var tmp = this._oParticle.getDirection();
			this._oContainer.rotation = this.getDirectionRadian(tmp);
			this._oBody.lineStyle(0.1,16711680,1).moveTo(0,0.25).lineTo(0.5,0).lineTo(0,-0.25);
		}
	}
	,update: function() {
		this._oVelocity.clear();
		this.updateBody();
		this._oContainer.position.set(this._oParticle.getPosition().x + 0.5,this._oParticle.getPosition().y + 0.5);
	}
	,getDirectionRadian: function(oDirection) {
		switch(oDirection) {
		case 0:
			return Math.PI / 2;
		case 1:
			return -Math.PI / 2;
		case 2:
			return Math.PI;
		case 3:
			return 0;
		}
	}
};
var particle_view_View = function(oModel,oStage,oInteractionManager) {
	this._oDragged = null;
	var _gthis = this;
	this._oModel = oModel;
	this._oStage = oStage;
	this._oStage.scale.x = 10;
	this._oStage.scale.y = 10;
	this._oMenu = new particle_view_Menu(this._oModel,window.document.getElementById("menu"));
	var oGridView = new particle_view_GridView(200,100);
	this._oStage.addChild(oGridView.getContainer());
	this._mParticleView = new haxe_ds_IntMap();
	oInteractionManager.on("pointerup",function(event) {
		if(_gthis._oDragged == null) {
			return;
		}
		var oVector = event.data.getLocalPosition(_gthis._oStage);
		_gthis.onParticleDragTo.trigger({ particle : _gthis._oDragged.getParticle(), position : new space_Vector2i(Math.floor(oVector.x),Math.floor(oVector.y))});
		_gthis._oDragged = null;
	});
	this.onParticleDragTo = new trigger_EventListener();
	this._oMenu.update();
};
particle_view_View.__name__ = true;
particle_view_View.prototype = {
	getZoom: function() {
		return this._oStage.scale.x;
	}
	,getScene: function() {
		return this._oStage;
	}
	,toGridPosition: function(x,y) {
		var oVector = this._oStage.toLocal(new PIXI.Point(x,y));
		return new space_Vector2i(Math.floor(oVector.x),Math.floor(oVector.y));
	}
	,getMenu: function() {
		return this._oMenu;
	}
	,setZoom: function(x,y,f) {
		this._oStage.setTransform(x,y,f,f);
	}
	,addParticle: function(oParticle) {
		var _this = this._mParticleView;
		var key = oParticle.getId();
		if(_this.h.hasOwnProperty(key)) {
			throw new js__$Boot_HaxeError("!!!");
		}
		var _this1 = this._mParticleView;
		var key1 = oParticle.getId();
		var value = this._createParticleView(oParticle);
		_this1.h[key1] = value;
	}
	,updateParticle: function(oParticle) {
		var _this = this._mParticleView;
		var key = oParticle.getId();
		if(!_this.h.hasOwnProperty(key)) {
			throw new js__$Boot_HaxeError("!!");
		}
		var _this1 = this._mParticleView;
		var key1 = oParticle.getId();
		_this1.h[key1].update();
	}
	,removeParticle: function(oParticle) {
		if(this._oModel.getCount() + 1 != Lambda.count(this._mParticleView)) {
			throw new js__$Boot_HaxeError("!!");
		}
		var _this = this._mParticleView;
		var key = oParticle.getId();
		if(!_this.h.hasOwnProperty(key)) {
			console.log("src/particle/view/View.hx:121:","WARING trying to remove #" + oParticle.getId());
			return;
		}
		console.log("src/particle/view/View.hx:124:","removing #" + oParticle.getId());
		var tmp = this._oStage;
		var _this1 = this._mParticleView;
		var key1 = oParticle.getId();
		tmp.removeChild(_this1.h[key1].getContainer());
		this._mParticleView.remove(oParticle.getId());
		if(this._oModel.getCount() != Lambda.count(this._mParticleView)) {
			throw new js__$Boot_HaxeError("!!");
		}
	}
	,update: function() {
	}
	,_createParticleView: function(oParticle) {
		var _gthis = this;
		var oView = new particle_view_ParticleView(oParticle);
		this._oStage.addChild(oView.getContainer());
		oView.getContainer().on("pointerdown",function() {
			_gthis._oDragged = oView;
			console.log("src/particle/view/View.hx:153:",_gthis._oDragged);
		});
		oView.update();
		return oView;
	}
};
var sweet_functor_comparator_ReflectComparator = function() {
};
sweet_functor_comparator_ReflectComparator.__name__ = true;
sweet_functor_comparator_ReflectComparator.prototype = {
	apply: function(a,b) {
		return Reflect.compare(a,b);
	}
};
var trigger_EventListener = function() {
	this._aFn = new haxe_ds_List();
};
trigger_EventListener.__name__ = true;
trigger_EventListener.prototype = {
	add: function(fn) {
		this._aFn.push(fn);
	}
	,remove: function(fn) {
		this._aFn.remove(fn);
	}
	,trigger: function(oEvent) {
		var _g_head = this._aFn.h;
		while(_g_head != null) {
			var val = _g_head.item;
			_g_head = _g_head.next;
			var fn = val;
			fn(oEvent);
		}
	}
};
function $getIterator(o) { if( o instanceof Array ) return HxOverrides.iter(o); else return o.iterator(); }
function $bind(o,m) { if( m == null ) return null; if( m.__id__ == null ) m.__id__ = $global.$haxeUID++; var f; if( o.hx__closures__ == null ) o.hx__closures__ = {}; else f = o.hx__closures__[m.__id__]; if( f == null ) { f = m.bind(o); o.hx__closures__[m.__id__] = f; } return f; }
$global.$haxeUID |= 0;
if( String.fromCodePoint == null ) String.fromCodePoint = function(c) { return c < 0x10000 ? String.fromCharCode(c) : String.fromCharCode((c>>10)+0xD7C0)+String.fromCharCode((c&0x3FF)+0xDC00); }
String.__name__ = true;
Array.__name__ = true;
Date.__name__ = "Date";
haxe_Resource.content = [{ name : "menu", data : "DQo8YnV0dG9uIGRhdGEtYWN0aW9uPSJzdGVwIj4NCgkmY3VyYXJyOw0KPC9idXR0b24+DQo8YnV0dG9uIGRhdGEtYWN0aW9uPSJ0b2dnbGVfcGxheSI+DQoJOjppZiAoc3BlZWQgPT0gMCk6OiANCgkJJnJ0cmlmOyANCgk6OmVsc2U6OiANCgkJJnNxdWFyZjsgDQoJOjplbmQ6Og0KPC9idXR0b24+DQo8YnV0dG9uIGRhdGEtYWN0aW9uPSJzcGVlZCB1cCI+DQoJJnJ0cmlmOyZydHJpZjsNCjwvYnV0dG9uPg"},{ name : "grid_shader", data : "cHJlY2lzaW9uIG1lZGl1bXAgZmxvYXQ7DQoNCnVuaWZvcm0gZmxvYXQgdnB3OyAvLyBXaWR0aCwgaW4gcGl4ZWxzDQp1bmlmb3JtIGZsb2F0IHZwaDsgLy8gSGVpZ2h0LCBpbiBwaXhlbHMNCg0KdW5pZm9ybSB2ZWMyIG9mZnNldDsgLy8gZS5nLiBbLTAuMDIzNTAwMDAwMDAwMDAwNDM0IDAuOTc5NDAwMDAwMDAwMDAxN10sIGN1cnJlbnRseSB0aGUgc2FtZSBhcyB0aGUgeC95IG9mZnNldCBpbiB0aGUgbXZNYXRyaXgNCnVuaWZvcm0gdmVjMiBwaXRjaDsgIC8vIGUuZy4gWzUwIDUwXQ0KDQp2b2lkIG1haW4oKSB7DQogIGZsb2F0IGxYID0gZ2xfRnJhZ0Nvb3JkLnggLyB2cHc7DQogIGZsb2F0IGxZID0gZ2xfRnJhZ0Nvb3JkLnkgLyB2cGg7DQoNCiAgZmxvYXQgc2NhbGVGYWN0b3IgPSAxMDAwMC4wOw0KDQogIGZsb2F0IG9mZlggPSAoc2NhbGVGYWN0b3IgKiBvZmZzZXRbMF0pICsgZ2xfRnJhZ0Nvb3JkLng7DQogIGZsb2F0IG9mZlkgPSAoc2NhbGVGYWN0b3IgKiBvZmZzZXRbMV0pICsgKDEuMCAtIGdsX0ZyYWdDb29yZC55KTsNCg0KICBpZiAoaW50KG1vZChvZmZYLCBwaXRjaFswXSkpID09IDAgfHwNCiAgICAgIGludChtb2Qob2ZmWSwgcGl0Y2hbMV0pKSA9PSAwKSB7DQogICAgZ2xfRnJhZ0NvbG9yID0gdmVjNCgwLjAsIDAuMCwgMC4wLCAwLjUpOw0KICB9IGVsc2Ugew0KICAgIGdsX0ZyYWdDb2xvciA9IHZlYzQoMS4wLCAxLjAsIDEuMCwgMS4wKTsNCiAgfQ0KfQ"}];
var __map_reserved = {};
Object.defineProperty(js__$Boot_HaxeError.prototype,"message",{ get : function() {
	return String(this.val);
}});
js_Boot.__toStr = ({ }).toString;
Perf.MEASUREMENT_INTERVAL = 1000;
Perf.FONT_FAMILY = "Helvetica,Arial";
Perf.FPS_BG_CLR = "#00FF00";
Perf.FPS_WARN_BG_CLR = "#FF8000";
Perf.FPS_PROB_BG_CLR = "#FF0000";
Perf.MS_BG_CLR = "#FFFF00";
Perf.MEM_BG_CLR = "#086A87";
Perf.INFO_BG_CLR = "#00FFFF";
Perf.FPS_TXT_CLR = "#000000";
Perf.MS_TXT_CLR = "#000000";
Perf.MEM_TXT_CLR = "#FFFFFF";
Perf.INFO_TXT_CLR = "#000000";
Perf.TOP_LEFT = "TL";
Perf.TOP_RIGHT = "TR";
Perf.BOTTOM_LEFT = "BL";
Perf.BOTTOM_RIGHT = "BR";
Perf.DELAY_TIME = 4000;
haxe_Template.splitter = new EReg("(::[A-Za-z0-9_ ()&|!+=/><*.\"-]+::|\\$\\$([A-Za-z0-9_-]+)\\()","");
haxe_Template.expr_splitter = new EReg("(\\(|\\)|[ \r\n\t]*\"[^\"]*\"[ \r\n\t]*|[!+=/><*.&|-]+)","");
haxe_Template.expr_trim = new EReg("^[ ]*([^ ]+)[ ]*$","");
haxe_Template.expr_int = new EReg("^[0-9]+$","");
haxe_Template.expr_float = new EReg("^([+-]?)(?=\\d|,\\d)\\d*(,\\d*)?([Ee]([+-]?\\d+))?$","");
haxe_Template.globals = { };
haxe_Template.hxKeepArrayIterator = HxOverrides.iter([]);
haxe_crypto_Base64.CHARS = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/";
haxe_crypto_Base64.BYTES = haxe_io_Bytes.ofString(haxe_crypto_Base64.CHARS);
pixi_plugins_app_Application.AUTO = "auto";
pixi_plugins_app_Application.RECOMMENDED = "recommended";
pixi_plugins_app_Application.CANVAS = "canvas";
pixi_plugins_app_Application.WEBGL = "webgl";
pixi_plugins_app_Application.POSITION_STATIC = "static";
pixi_plugins_app_Application.POSITION_ABSOLUTE = "absolute";
pixi_plugins_app_Application.POSITION_FIXED = "fixed";
pixi_plugins_app_Application.POSITION_RELATIVE = "relative";
pixi_plugins_app_Application.POSITION_INITIAL = "initial";
pixi_plugins_app_Application.POSITION_INHERIT = "inherit";
particle_model_DirectionTool.all = [3,0,2,1];
particle_model_DirectionTool.vector = (function($this) {
	var $r;
	var _g = new haxe_ds_IntMap();
	_g.set(3,new space_Vector2i(1,0));
	_g.set(0,new space_Vector2i(0,1));
	_g.set(2,new space_Vector2i(-1,0));
	_g.set(1,new space_Vector2i(0,-1));
	$r = _g;
	return $r;
}(this));
particle_view_ParticleView.TYPE_COLOR = (function($this) {
	var $r;
	var _g = new haxe_ds_StringMap();
	_g.set("generator",16777215);
	_g.set("energy_echo",65535);
	_g.set("pusher",16776960);
	_g.set("redirect",65535);
	_g.set("multiplexer",65535);
	_g.set("wall_generator",0);
	_g.set("fabricator",15658734);
	$r = _g;
	return $r;
}(this));
particle_Main.main();
})(typeof exports != "undefined" ? exports : typeof window != "undefined" ? window : typeof self != "undefined" ? self : this, typeof window != "undefined" ? window : typeof global != "undefined" ? global : typeof self != "undefined" ? self : this);
